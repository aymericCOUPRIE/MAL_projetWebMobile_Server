{"version":3,"sources":["app/utils/utils.js","app/components/headerfooter/CustomHeader.js","assets/img/logo.png","app/pages/home/home.js","app/pages/login/login.js","app/pages/update-password/update-password.js","app/components/tables/Filters.js","app/components/tables/TableContainer.js","app/components/ModalForm/modal.js","app/components/ModalForm/triggerButton.js","app/components/ModalForm/container.js","app/components/contact/CardContact.js","app/pages/societe/AfficherExposant.js","app/pages/handle-accounts/registerForm.js","app/pages/handle-accounts/handle-accounts.js","app/components/festivals/FormLocalisation.js","app/pages/festivals/FormFestival.js","app/components/tables/SimpleTableContainer.js","app/components/festivals/CardFestival.js","app/pages/festivals/Festivals.js","app/pages/type-jeux/formType.js","app/pages/type-jeux/type-jeux.js","app/pages/jeux/formJeu.js","app/pages/jeux/jeux.js","app/routes/privateRoute.js","app/pages/festival-games/festival-games.js","app/pages/exhibitor-monitoring/exhibitor-monitoring.js","app/pages/societe/AfficherSocieteRole.js","app/routes/routes.js","app/components/headerfooter/CustomFooter.js","App.js","index.js"],"names":["isAdmin","token","localStorage","getItem","jwt_decode","user_estAdmin","isLogin","jwt","verify","err","decoded","email","user_email","CustomHeader","useState","dateFestivalCourant","setDateFestivalCourant","history","useHistory","useEffect","fes_id","Axios","get","then","res","data","festival","fes_date","Navbar","collapseOnSelect","fixed","expand","bg","variant","Toggle","aria-controls","Collapse","id","Nav","NavDropdown","title","Link","href","Button","onClick","removeItem","push","window","location","reload","className","icon","faShapes","faChessKnight","faUser","faTheaterMasks","Moment","format","faCalendarAlt","faClipboardList","faFileInvoiceDollar","faAddressBook","faTh","faDice","Home","dateProchainFestival","setdateProchainFestival","setItem","closestFestival","src","logo","xmlns","width","height","fill","viewBox","d","Login","setEmail","password","setPassword","errortext","setErrortext","Form","onSubmit","event","dataToSend","JSON","stringify","fetch","method","body","headers","Accept","ok","json","responseJson","error","preventDefault","FormText","Group","size","controlId","Label","Control","autoFocus","type","value","onChange","e","target","block","disabled","length","UpdatePassword","olderPassword","setOlderPassword","newPassword","setNewPassword","confirmedPassword","setConfirmedPassword","show","setShow","Alert","success","Filter","column","style","marginTop","canFilter","render","DefaultColumnFilter","filterValue","setFilter","preFilteredRows","Input","undefined","placeholder","SelectColumnFilter","options","React","useMemo","Set","forEach","row","add","values","CustomInput","map","option","index","TableContainer","columns","renderRowSubComponent","useTable","defaultColumn","initialState","pageIndex","pageSize","useFilters","useSortBy","useExpanded","usePagination","getTableProps","getTableBodyProps","headerGroups","page","prepareRow","visibleColumns","canPreviousPage","canNextPage","pageOptions","pageCount","gotoPage","nextPage","previousPage","setPageSize","state","generateSortingIndicator","isSorted","isSortedDesc","Table","bordered","hover","headerGroup","getHeaderGroupProps","getHeaderProps","getSortByToggleProps","cells","cell","getCellProps","isExpanded","colSpan","getRowProps","key","Row","maxWidth","margin","textAlign","Col","md","min","max","defaultValue","Number","Modal","onClickOutside","onKeyDown","modalRef","buttonRef","closeModal","Component","component","ReactDOM","createPortal","tag","role","tabIndex","aria-modal","ref","aria-label","aria-labelledby","document","Trigger","triggerText","showModal","Container","isShown","setState","closeButton","focus","toggleScrollLock","submit","console","log","props","TriggerButton","keyCode","modal","contains","querySelector","classList","toggle","Fragment","this","n","CardContact","contact","co_nom","co_prenom","co_telPortable","co_telFixe","co_principal","CardText","color","toUpperCase","marginRight","AfficherExposant","societe","setListSociete","optionsDiscussion","setOptionsDiscussion","libelle","response","societes","updateDateContact","suivE_id","numeroRelance","put","suivE_dateContact","Header","Cell","getToggleRowExpandedProps","faEyeSlash","faInfoCircle","accessor","as","suivi_exposants","suivE_commentaire","suivD_id","toString","disableSortBy","filter","original","backgroundColor","find","element","parseInt","selected","suivD_libelle","reservations","String","espace","esp_qte","esp_enTables","suivE_benevole","defaultChecked","checked","res_facture","res_id","suivE_dateContact1","suivE_dateContact2","suivE_dateContact3","contacts","soc_nom","soc_rue","soc_ville","soc_codePostal","soc_id","columnCount","display","padding","Card","CardBody","CardTitle","RegisterForm","estAdmin","setEstAdmin","Check","inline","label","HandleAccounts","userList","setUserList","delete","post","FormLocalisation","onSubmitLocalisation","loc_libelle","setLibelle","loc_prixTable","setPrixTable","loc_prixM2","setPrixM2","FormFestival","setDate","fes_nbTables","setNbTables","SimpleTableContainer","CardFestival","fes","updateDate","updateNbTables","festivalDate","localisationList","setLocalList","rowIndex","loc_id","new_priceTable","updatePriceTable","new_priceM2","updatePriceM2","Festivals","festivals","setListFestivals","allFestivals","updateDateFestival","new_date","a","new_nbTables","fest","i","FormType","TypeJeu","gameTypeList","setGameTypeList","typJ_id","updateType","FormJeu","setTitle","minAge","setMinAge","duration","setDuration","maxNumPlayers","setMaxNumPlayers","minNumPlayers","setMinNumPlayers","rulesLink","setRulesLink","companyId","setCompanyId","gameTypeId","setGameTypeId","editeursList","setEditeursList","object","typJ_libelle","Jeux","listeJeux","setListeJeux","j_id","editeurId","typeId","updateGameTypeId","ageMin","updateageMin","nbjMin","updatenbjMin","j_nbMinJoueurs","nbjMax","updatenbjMax","duree","updateDuree","lienNotice","updateNotice","PrivateRoute","rest","redirection","pathname","from","to","FestivalGames","zoneList","setZoneList","result","suivJ_id","zo_id","zo_libelle","reservation","suivJ_prototype","suivJ_place","res_envoiDebut","suivJ_recu","suivJ_aRenvoyer","suivJ_renvoye","suivJ_dateSaisie","suivJ_tombola","suivJ_dotation","suivJ_nbJeuxRecus","suivJ_nbJeuxExposes","jeu","j_ageMin","j_nbMaxJoueurs","j_duree","j_lienNotice","CardLink","ExhibitorMonitoring","idExposant","useParams","setContactList","name","setName","showAdress","setShowAdress","setSoc_ville","setSoc_rue","setSoc_codePostal","soc_pays","setSoc_pays","detailSuivi","setDetailSuivi","commentaire","setCommentaire","faCheckCircle","Accordion","eventKey","Body","suivE_deplacement","suivE_nbBenevoles","res_paiemen","AfficherSocieteRole","fetchData","soc_estInactif","role_festival","rolF_estExposant","rolF_estEditeur","Routes","exact","path","TypeJeux","CustomFooter","faFacebook","faTwitter","faInstagram","faMapMarker","faPhone","faEnvelope","App","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.15ab0e3f.chunk.js","sourcesContent":["import jwt_decode from \"jwt-decode\";\nimport jwt from \"jsonwebtoken\";\n\nexport function isAdmin() {\n    const token = localStorage.getItem(\"userToken\");\n    return token ? jwt_decode(token).user_estAdmin : null;\n}\n\nexport function isLogin() {\n    const token = localStorage.getItem(\"userToken\");\n    if (token) {\n        return jwt.verify(token, \"secret\", (err, decoded) => {\n            return !err;\n        })\n\n    } else {\n        return false\n    }\n}\n\nexport function email(){\n    const token = localStorage.getItem(\"userToken\");\n    return token ? jwt_decode(token).user_email : null\n}\n\n","import {Container, Nav, Navbar, NavDropdown} from \"react-bootstrap\";\nimport {email, isAdmin, isLogin} from \"../../utils/utils\";\nimport Button from \"react-bootstrap/Button\";\nimport {useHistory} from \"react-router-dom\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\n\nimport {\n    faUser,\n    faAddressBook,\n    faCalendarAlt,\n    faDice,\n    faClipboardList,\n    faFileInvoiceDollar,\n    faTh,\n    faShapes,\n    faTheaterMasks,\n    faChessKnight\n} from \"@fortawesome/free-solid-svg-icons\";\nimport './CustomHeader.css'\nimport React, {useEffect, useState} from \"react\";\nimport Axios from \"axios\";\nimport Moment from \"moment\";\n\nconst CustomHeader = () => {\n\n    const [dateFestivalCourant, setDateFestivalCourant] = useState(null);\n\n    const history = useHistory();\n\n    function logout() {\n        localStorage.removeItem(\"userToken\")\n        history.push(\"/\")\n        window.location.reload(false)\n    }\n\n    //méthode qui s'appelle au chargement de la page\n    useEffect(() => {\n\n        const fes_id = localStorage.getItem(\"currentFestival\");\n\n        Axios.get(`/server/festivals/${fes_id}`)\n            .then((res) => {\n                setDateFestivalCourant(res.data.festival.fes_date)\n            })\n\n\n    });\n\n\n    //mettre dans isAdmin les pages accecibles uniquement à l'admin\n//idem pour isLogin ---------------------------------- si on est connecté\n// à la fin les pages accéssibles à tous\n\n    return (\n        <div>\n            <header>\n                <Navbar collapseOnSelect fixed='top' expand='lg' bg='dark' variant='dark'>\n                    <Container>\n                        <Navbar.Toggle aria-controls='responsive-navbar-nav'/>\n                        <Navbar.Collapse id='responsive-navbar-nav'>\n                            {isLogin() ? (\n                                <Nav>\n                                    <NavDropdown title={email()} id=\"who\">\n                                        <Nav.Link id=\"dropdownItem\" href='/update-password'>Changer de mot de\n                                            passe</Nav.Link>\n                                        <Button variant=\"link\" onClick={logout}>Se déconnecter</Button>\n                                    </NavDropdown>\n                                </Nav>\n                            ) : (\n\n                                <Nav>\n                                    <Nav.Link href='/login'>Se connecter</Nav.Link>\n                                </Nav>\n                            )}\n                            {isLogin() ? (\n                                <Nav>\n                                    <NavDropdown title=\"Paramètres\">\n                                        <Nav.Link id=\"dropdownItem\" href='/type-jeux'>\n                                            <FontAwesomeIcon className=\"faicon\" icon={faShapes}/>\n                                            Types de jeux\n                                        </Nav.Link>\n                                        <Nav.Link id=\"dropdownItem\" href='/jeux'>\n                                            <FontAwesomeIcon className=\"faicon\" icon={faChessKnight}/>\n                                            Jeux\n                                        </Nav.Link>\n\n                                        {isAdmin() ? (\n                                            <Nav.Link id=\"dropdownItem\" href='/handle-accounts'>\n                                                <FontAwesomeIcon className=\"faicon\" icon={faUser}/>\n                                                Gérer les comptes\n                                            </Nav.Link>\n\n                                        ) : null}\n\n                                    </NavDropdown>\n                                    <Nav>\n                                        <div id=\"fesC\">\n                                            <FontAwesomeIcon className=\"faicon\" icon={faTheaterMasks}/> Festival\n                                            courant:\n                                        </div>\n\n                                        <NavDropdown title={Moment(dateFestivalCourant).format('DD/MM/YYYY')}\n                                                     id=\"who\">\n                                            <Nav.Link id=\"dropdownItem\" href='/festivals'>\n                                                <FontAwesomeIcon className=\"faicon\" icon={faCalendarAlt}/>\n                                                Festivals\n                                            </Nav.Link>\n                                        </NavDropdown>\n\n                                        <Nav.Link href='/'>\n                                            <FontAwesomeIcon className=\"faicon\" icon={faClipboardList}/>\n                                            Reservations\n                                        </Nav.Link>\n                                        {isAdmin() ? (\n                                            <Nav.Link href='/'>\n                                                <FontAwesomeIcon className=\"faicon\" icon={faFileInvoiceDollar}/>\n                                                Facture\n                                            </Nav.Link>\n                                        ) : null}\n                                    </Nav>\n                                </Nav>\n                            ) : null}\n                            <Nav>\n\n                                <NavDropdown title={\"Gestion sociétés\"} id={\"societes\"}>\n\n                                    <Nav.Link href='/exposants'>\n                                        <FontAwesomeIcon className=\"faicon\" icon={faAddressBook}/>\n                                        Exposants\n                                    </Nav.Link>\n\n                                    <Nav.Link href='/societes'>\n                                        <FontAwesomeIcon className=\"faicon\" icon={faTh}/>\n                                        Rôles Societes\n                                    </Nav.Link>\n\n                                    <Nav.Link href='/editeurs'>\n                                        <FontAwesomeIcon className=\"faicon\" icon={faTh}/>\n                                        Editeurs\n                                    </Nav.Link>\n                                </NavDropdown>\n\n\n                                <Nav.Link href='/festival-games'>\n                                    <FontAwesomeIcon className=\"faicon\" icon={faDice}/>\n                                    Jeux festival\n                                </Nav.Link>\n                                <Nav.Link href='/'>\n                                    <FontAwesomeIcon className=\"faicon\" icon={faTh}/>\n                                    Zones festival\n                                </Nav.Link>\n\n                            </Nav>\n\n                        </Navbar.Collapse>\n                    </Container>\n                </Navbar>\n            </header>\n        </div>\n    )\n}\n\nexport default CustomHeader\n","export default __webpack_public_path__ + \"static/media/logo.b3125042.png\";","import logo from \"../../../assets/img/logo.png\";\nimport React, {useEffect, useState} from \"react\";\nimport Axios from \"axios\";\nimport Moment from 'moment';\nimport './home.css';\n\nexport default function Home() {\n    const [dateProchainFestival, setdateProchainFestival] = useState(null);\n\n    //méthode qui s'appelle au chargement de la page\n    useEffect(() => {\n        Axios.get(\"/serverfestivals/closest\")\n            .then((res) => {\n                localStorage.setItem(\"currentFestival\", res.data.closestFestival[0].fes_id);\n                setdateProchainFestival(res.data.closestFestival[0].fes_date);\n            })\n\n\n    });\n\n    return (\n\n        <>\n            <body className=\"home\">\n\n            <div className=\"flex-container\">\n                <div className=\"flex-item\">\n                    <img id=\"image\" src={logo}/>\n                </div>\n                <div className=\"flex-item\">\n                    <h1>SORTONS JOUER !</h1>\n                    <h2> RENDEZ VOUS</h2>\n                    <h3>\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\"\n                             className=\"bi bi-caret-right-fill\" viewBox=\"0 0 16 16\">\n                            <path\n                                d=\"M12.14 8.753l-5.482 4.796c-.646.566-1.658.106-1.658-.753V3.204a1 1 0 0 1 1.659-.753l5.48 4.796a1 1 0 0 1 0 1.506z\"/>\n                        </svg>\n                        {Moment(dateProchainFestival).format('DD/MM/YYYY')}\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\"\n                             className=\"bi bi-caret-left-fill\" viewBox=\"0 0 16 16\">\n                            <path\n                                d=\"M3.86 8.753l5.482 4.796c.646.566 1.658.106 1.658-.753V3.204a1 1 0 0 0-1.659-.753l-5.48 4.796a1 1 0 0 0 0 1.506z\"/>\n                        </svg>\n                    </h3>\n                    <p id=\"phraseGratuite\">Entrée libre et gratuite</p>\n                </div>\n            </div>\n\n            </body>\n        </>\n    );\n}\n","import React, {useState} from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport FormText from \"react-bootstrap/FormText\";\n\nimport {useHistory} from \"react-router\"\nimport \"./login.css\";\nimport logo from \"../../../assets/img/logo.png\";\n\n\n\n\nconst Login = () => {\n    const [email, setEmail] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [errortext, setErrortext] = useState(\"\");\n\n    const history = useHistory();\n\n    function validateForm() {\n        return email.length > 0 && password.length > 0;\n    }\n\n    function handleSubmit(event) {\n        setErrortext(\"\")\n\n        //variable à envoyer au back sous format JSON\n        let dataToSend = JSON.stringify({\n            email,\n            password,\n        });\n\n        //appel au back\n        fetch(`/server/login`, {\n            method: \"POST\",\n            body: dataToSend,\n            headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\",\n            },\n        }).then((res) => {\n            // If response was successful parse the json and dispatch an update\n            if (res.ok) {\n                res.json().then((responseJson) => {\n                    if (responseJson.token) {\n                        //stock le token en local\n                        //localStorage.getItem(\"userToken\") pour y acceder\n                        localStorage.setItem(\"userToken\", responseJson.token)\n                        history.push(\"/festivals\")\n                        window.location.reload(false)\n                    } else {\n                        setErrortext(responseJson.error);\n\n                    }\n                })\n            }\n        });\n\n        event.preventDefault();\n\n    }\n\n    return (\n        <div className=\"EspaceFooter\">\n            <img id=\"logo\" src={logo}/>\n            <div className=\"Login\">\n                <Form onSubmit={handleSubmit}>\n                    {/* equivalent du if/else */}\n                    {errortext !== \"\" ? (\n                        <FormText id=\"errorLabel\">{errortext}</FormText>\n                    ) : null}\n                    <Form.Group size=\"lg\" controlId=\"email\">\n                        <Form.Label>Email</Form.Label>\n                        <Form.Control\n                            autoFocus\n                            type=\"email\"\n                            value={email}\n                            onChange={(e) => setEmail(e.target.value)}\n                        />\n                    </Form.Group>\n                    <Form.Group size=\"lg\" controlId=\"password\">\n                        <Form.Label>Mot de passe</Form.Label>\n                        <Form.Control\n                            type=\"password\"\n                            value={password}\n                            onChange={(e) => setPassword(e.target.value)}\n                        />\n                    </Form.Group>\n                    <Button id=\"btn-connexion\" block size=\"lg\" type=\"submit\" disabled={!validateForm()}>\n                        Connexion\n                    </Button>\n\n                </Form>\n            </div>\n        </div>\n    );\n}\n\nexport default Login\n","import React, {useEffect, useState} from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport FormText from \"react-bootstrap/FormText\";\nimport Alert from 'react-bootstrap/Alert';\nimport logo from \"../../../assets/img/logo.png\";\nimport {email} from \"../../utils/utils\";\n\nimport './update-password.css'\n\nexport default function UpdatePassword(){\n    const [olderPassword, setOlderPassword] = useState(\"\");\n    const [newPassword, setNewPassword] = useState(\"\");\n    const [confirmedPassword, setConfirmedPassword] = useState(\"\");\n    const [errortext, setErrortext] = useState(\"\");\n    const [show, setShow] = useState(false)\n\n    function validateForm() {\n        return olderPassword.length > 0 && newPassword.length > 0 && confirmedPassword.length > 0;\n    }\n\n    function handleSubmit(event) {\n\n        if(newPassword != confirmedPassword){\n            setErrortext(\"Les deux mots de passe doivent être identiques\");\n        }else{\n            setErrortext(\"\");\n            //variable à envoyer au back sous format JSON\n            let dataToSend = JSON.stringify({\n                newPassword,\n                olderPassword\n            });\n            //appel au back\n            fetch(`/server/update-password/${email()}`, {\n                method: \"POST\",\n                body: dataToSend,\n                headers: {\n                    Accept: \"application/json\",\n                    \"Content-Type\": \"application/json\",\n                },\n            }).then((res) => {\n\n                // If response was successful parse the json and dispatch an update\n                if (res.ok) {\n                    res.json().then((responseJson) => {\n                        if (responseJson.success) {\n                            setShow(true)\n                        } else {\n                            setErrortext(responseJson.error);\n                        }\n                    })\n                }\n            });\n            event.preventDefault();\n        }\n\n    }\n    return(\n        <div className=\"EspaceFooter\">\n            <Alert id=\"alertSucces\" variant=\"success\" show={show}>\n                Mot de passe modifié avec succès!\n            </Alert>\n            <img id=\"logo\" src={logo} />\n            <div className=\"Password\">\n                <Form onSubmit={handleSubmit}>\n                    {/* equivalent du if/else */}\n                    {errortext !== \"\" ? (\n                        <FormText id=\"errorLabel\">{errortext}</FormText>\n                    ) : null}\n                    <Form.Group size=\"lg\" controlId=\"oldPassword\">\n                        <Form.Label>Ancien mot de passe</Form.Label>\n                        <Form.Control\n                            autoFocus\n                            type=\"password\"\n                            value={olderPassword}\n                            onChange={(e) => setOlderPassword(e.target.value)}\n                        />\n                    </Form.Group>\n                    <Form.Group size=\"lg\" controlId=\"newPassword\">\n                        <Form.Label>Nouveau mot de passe</Form.Label>\n                        <Form.Control\n                            type=\"password\"\n                            value={newPassword}\n                            onChange={(e) => setNewPassword(e.target.value)}\n                        />\n                    </Form.Group>\n                    <Form.Group size=\"lg\" controlId=\"confirmedPassword\">\n                        <Form.Label>Confirmer le nouveau mot de passe</Form.Label>\n                        <Form.Control\n                            type=\"password\"\n                            value={confirmedPassword}\n                            onChange={(e) => setConfirmedPassword(e.target.value)}\n                        />\n                    </Form.Group>\n                    <Button id=\"btn-validate\" block size=\"lg\" type=\"submit\" disabled={!validateForm()}>\n                        Valider\n                    </Button>\n                </Form>\n            </div>\n\n        </div>\n    );\n}","import React from 'react';\nimport {Input, CustomInput} from 'reactstrap';\n\nexport const Filter = ({column}) => {\n    return (\n        <div style={{marginTop: 5}}>\n            {column.canFilter && column.render('Filter')}\n        </div>\n    );\n};\n\n/**\n * Default filter --> Search menu\n *\n * @param filterValue\n * @param setFilter\n * @param length\n * @returns {JSX.Element}\n * @constructor\n */\nexport const DefaultColumnFilter = (\n    {\n        column: {\n            filterValue,\n            setFilter,\n            preFilteredRows: {length},\n        },\n    }) => {\n    return (\n        <Input\n            value={filterValue || ''}\n            onChange={(e) => {\n                setFilter(e.target.value || undefined);\n            }}\n            placeholder={`Rechercher...`}\n            //style={{width: 'auto'}}\n        />\n    );\n};\n\n/**\n * Type selector filter\n *        --> Selection between different types in column\n *\n * @param filterValue\n * @param setFilter\n * @param preFilteredRows\n * @param id\n * @returns {JSX.Element}\n * @constructor\n */\nexport const SelectColumnFilter = (\n    {\n        column: {filterValue, setFilter, preFilteredRows, id},\n    }) => {\n    const options = React.useMemo(() => {\n        const options = new Set();\n        preFilteredRows.forEach((row) => {\n            options.add(row.values[id]);\n        });\n        return [...options.values()];\n    }, [id, preFilteredRows]);\n\n    return (\n        <CustomInput\n            id='custom-select'\n            type='select'\n            value={filterValue}\n            //style={{width: 'auto'}}\n            onChange={(e) => {\n                setFilter(e.target.value || undefined);\n            }}\n        >\n            <option value=''>Tous</option>\n            {options.map((option, index) => (\n                <option key={option} value={option}> {option} </option>\n            ))}\n        </CustomInput>\n    );\n};\n","import React, {Fragment} from 'react';\nimport './TableContainer.css'\nimport {\n    useTable,\n    useSortBy,\n    useFilters,\n    useExpanded,\n    usePagination,\n} from 'react-table';\nimport {Table, Row, Col, Button, Input, CustomInput} from 'reactstrap';\nimport {Filter, DefaultColumnFilter} from './Filters';\n\nconst TableContainer = ({columns, data, renderRowSubComponent}) => {\n    const {\n        getTableProps,\n        getTableBodyProps,\n        headerGroups,\n        page,\n        prepareRow,\n        visibleColumns,\n        canPreviousPage,\n        canNextPage,\n        pageOptions,\n        pageCount,\n        gotoPage,\n        nextPage,\n        previousPage,\n        setPageSize,\n        state: {pageIndex, pageSize},\n    } = useTable(\n        {\n            columns,\n            data,\n            defaultColumn: {Filter: DefaultColumnFilter},\n            initialState: {pageIndex: 0, pageSize: 10},\n        },\n        useFilters,\n        useSortBy,\n        useExpanded,\n        usePagination\n    );\n\n    const generateSortingIndicator = (column) => {\n        return column.isSorted ? (column.isSortedDesc ? ' 🔽' : ' 🔼') : '';\n    };\n\n    const onChangeInSelect = (event) => {\n        setPageSize(Number(event.target.value));\n    };\n\n    const onChangeInInput = (event) => {\n        const page = event.target.value ? Number(event.target.value) - 1 : 0;\n        gotoPage(page);\n    };\n\n    return (\n        <Fragment>\n            <Table bordered hover {...getTableProps()} style={{width: '100%'}}>\n\n                {/* En-tete du tableau (avec les menu de recherches/tris)*/}\n                <thead>\n                {headerGroups.map((headerGroup) => (\n                    <tr  {...headerGroup.getHeaderGroupProps()}>\n                        {headerGroup.headers.map((column) => (\n                            <th {...column.getHeaderProps()}>\n                                <div {...column.getSortByToggleProps()}>\n                                    {column.render('Header')}\n                                    {generateSortingIndicator(column)}\n                                </div>\n                                <Filter column={column}/>\n                            </th>\n                        ))}\n                    </tr>\n                ))}\n                </thead>\n\n\n                {/* Affichage des données*/}\n                <tbody {...getTableBodyProps()} style={{width: 'auto'}}>\n                {page.map((row) => {\n                    prepareRow(row);\n                    return (\n                        <Fragment key={row.getRowProps().key}>\n\n                            {/* Contenu pour chaque ligne*/}\n                            <tr >\n                                {row.cells.map((cell) => {\n                                    return (\n                                        <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                                    );\n                                })}\n                            </tr>\n\n                            {/* Affichage du contenu supplémentaire (details) */}\n                            {row.isExpanded && (\n                                <tr>\n                                    <td colSpan={visibleColumns.length}>\n                                        {renderRowSubComponent(row)}\n                                    </td>\n                                </tr>\n                            )}\n\n                        </Fragment>\n                    );\n                })}\n                </tbody>\n\n\n            </Table>\n\n\n            {/* Bas du tableau (changement de pages)*/}\n            <Row style={{maxWidth: 1000, margin: '0 auto', textAlign: 'center'}}>\n                {/* Most Left button --> Go back to page 0*/}\n\n                {/* go back buttons*/}\n                <Col md={3}>\n                    <Button\n                        id=\"pagination\"\n                        onClick={() => gotoPage(0)}\n                        disabled={!canPreviousPage}\n                    >\n                        {'<<'}\n                    </Button>\n\n                    {/* Left button --> Go to previous page*/}\n                    <Button\n                        id=\"pagination\"\n                        onClick={previousPage}\n                        disabled={!canPreviousPage}\n                    >\n                        {'<'}\n                    </Button>\n                </Col>\n\n\n                {/* Display the current page number*/}\n                <Col md={2} style={{marginTop: 7}}>\n                    Page{' '}\n                    <strong>\n                        {pageIndex + 1} sur {pageOptions.length}\n                    </strong>\n                </Col>\n\n                {/* TextField for selecting the page number*/}\n                <Col md={2}>\n                    <Input\n                        type='number'\n                        min={1}\n                        style={{width: 70}}\n                        max={pageOptions.length}\n                        defaultValue={pageIndex + 1}\n                        onChange={onChangeInInput}\n                    />\n                </Col>\n\n                {/* Slector for changing the number of items displayed per page */}\n                <Col md={2}>\n                    <CustomInput\n                        type='select'\n                        value={pageSize}\n                        id={\"selectionPage\"}\n                        onChange={onChangeInSelect}\n                    >\n                        {[10, 20, 30, 40, 50].map((pageSize) => (\n                            <option key={pageSize} value={pageSize}>\n                                Afficher {pageSize}\n                            </option>\n                        ))}\n                    </CustomInput>\n                </Col>\n\n\n                {/*Go forward buttons*/}\n                <Col md={3}>\n                    {/* Right button --> Go to next page*/}\n                    <Button id=\"pagination\" onClick={nextPage} disabled={!canNextPage}>\n                        {'>'}\n                    </Button>\n\n                    {/* Go to last page*/}\n                    <Button\n                        id=\"pagination\"\n                        onClick={() => gotoPage(pageCount - 1)}\n                        disabled={!canNextPage}\n                    >\n                        {'>>'}\n                    </Button>\n                </Col>\n            </Row>\n        </Fragment>\n    );\n};\n\nexport default TableContainer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport FocusTrap from 'focus-trap-react';\n\n\nexport const Modal = ({\n                          onClickOutside,\n                          onKeyDown,\n                          modalRef,\n                          buttonRef,\n                          closeModal,\n                          onSubmit,\n                          component: Component\n                      }) => {\n\n    return ReactDOM.createPortal(\n        <FocusTrap>\n            <aside\n                tag=\"aside\"\n                role=\"dialog\"\n                tabIndex=\"-1\"\n                aria-modal=\"true\"\n                className=\"modal-cover\"\n                onClick={onClickOutside}\n                onKeyDown={onKeyDown}\n            >\n                <div className=\"modal-area\" ref={modalRef}>\n                    <button\n                        ref={buttonRef}\n                        aria-label=\"Close Modal\"\n                        aria-labelledby=\"close-modal\"\n                        className=\"_modal-close\"\n                        onClick={closeModal}\n                    >\n            <span id=\"close-modal\" className=\"_hide-visual\">\n              Close\n            </span>\n                        <svg className=\"_modal-close-icon\" viewBox=\"0 0 40 40\">\n                            <path d=\"M 10,10 L 30,30 M 30,10 L 10,30\"/>\n                        </svg>\n                    </button>\n\n                    <div className=\"modal-body\">\n                        <Component onSubmit={onSubmit}/>\n                    </div>\n\n\n                </div>\n            </aside>\n        </FocusTrap>,\n        document.body\n    );\n};\n","import React from 'react';\nimport Button from \"react-bootstrap/Button\";\nimport './triggerButton.css'\n\n\nconst Trigger = ({ triggerText, buttonRef, showModal }) => {\n    return (\n        <Button id='buttonModal'\n            ref={buttonRef}\n            onClick={showModal}\n        >\n            {triggerText}\n        </Button>\n    );\n};\nexport default Trigger;","import React, {Component} from 'react';\nimport {Modal} from './modal';\nimport TriggerButton from './triggerButton';\n\nexport class Container extends Component {\n    state = {isShown: false};\n\n    showModal = () => {\n        this.setState({isShown: true}, () => {\n            this.closeButton.focus();\n        });\n        this.toggleScrollLock();\n    };\n\n    submit = (event) => {\n        console.log(this.props)\n        this.closeModal();\n        this.props.onSubmit(event);\n    }\n\n    closeModal = () => {\n        this.setState({isShown: false});\n        this.TriggerButton.focus();\n        this.toggleScrollLock();\n    };\n    onKeyDown = (event) => {\n        if (event.keyCode === 27) {\n            this.closeModal();\n        }\n    };\n    onClickOutside = (event) => {\n        if (this.modal && this.modal.contains(event.target)) return;\n        this.closeModal();\n    };\n\n    toggleScrollLock = () => {\n        document.querySelector('html').classList.toggle('scroll-lock');\n    };\n\n    render() {\n        return (\n            <React.Fragment>\n                <TriggerButton\n                    showModal={this.showModal}\n                    buttonRef={(n) => (this.TriggerButton = n)}\n                    triggerText={this.props.triggerText}\n                />\n                {this.state.isShown ? (\n                    <Modal\n                        onSubmit={this.submit}\n                        modalRef={(n) => (this.modal = n)}\n                        buttonRef={(n) => (this.closeButton = n)}\n                        closeModal={this.closeModal}\n                        onKeyDown={this.onKeyDown}\n                        onClickOutside={this.onClickOutside}\n                        component={this.props.component}\n                    />\n                ) : null}\n            </React.Fragment>\n        );\n    }\n}\n\nexport default Container;\n\n","import {CardBody, CardText} from \"reactstrap\";\n\nconst CardContact = (contact, ...res) => {\n\n    const {\n        co_nom,\n        co_prenom,\n        co_telPortable,\n        co_telFixe,\n        co_principal\n    } = contact.props\n\n    return (\n        <div>\n                <CardText style={{color: co_principal ? \"red\" : \"default\"}}>\n                    {co_nom.toUpperCase()} {co_prenom}\n                    <br/>\n                    <span style={{marginRight: '1rem'}}>\n                    Portable : {co_telPortable}\n                </span>\n                    <span>\n                    Fixe : {co_telFixe}\n                </span>\n                </CardText>\n        </div>\n    );\n}\n\nexport default CardContact;\n","import React, {useEffect, useState, useMemo} from \"react\";\nimport Axios from \"axios\"\n\nimport TableContainer from \"../../components/tables/TableContainer\";\nimport {SelectColumnFilter} from \"../../components/tables/Filters\";\nimport {Container} from \"../../components/ModalForm/container\";\nimport FormSociete from \"./formSociete\";\nimport CardContact from \"../../components/contact/CardContact\";\n\nimport './AfficherSociete.css'\n\nimport {Card, Form, Button} from \"react-bootstrap\";\nimport {CardBody, CardText, CardTitle} from \"reactstrap\";\n\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faEyeSlash, faInfoCircle} from \"@fortawesome/free-solid-svg-icons\";\n\nexport default function AfficherExposant() {\n\n    const [societe, setListSociete] = useState([])\n    const [optionsDiscussion, setOptionsDiscussion] = useState([])\n\n\n    const options = [\n        {id: 1, libelle: \"Absent\", color: \"rgb(200,56,56)\"},\n        {id: 2, libelle: \"Présence confirmée\", color: \"rgb(57,171,57)\"},\n        {id: 3, libelle: \"En discussion\", color: \"rgb(204, 255, 51)\"},\n        {id: 4, libelle: \"Présent (liste jeux demandée)\", color: \"rgb(57,171,57)\"},\n        {id: 5, libelle: \"Considéré absent\", color: \"rgb(255, 165, 0)\"},\n        {id: 6, libelle: \"Présent via distributeur\", color: \"rgb(57,171,57)\"},\n        {id: 7, libelle: \"Présent (liste jeux reçus)\", color: \"rgb(57,171,57)\"},\n    ]\n\n\n    useEffect(() => {\n        Axios.get(`/server/festivals/affichageExposant/${localStorage.getItem(\"currentFestival\")}`)\n            .then((response) => {\n                setListSociete(response.data[0].societes)\n                console.log(response.data[0].societes)\n            })\n    }, [])\n\n    useEffect(() => {\n        Axios.get(\"/serversuiviExposant/getDiscussions\")\n            .then((response) => {\n                setOptionsDiscussion(response.data)\n                console.log(\"DISC\", response.data)\n            });\n    }, [])\n\n\n    const updateDateContact = (suivE_id, value, numeroRelance) => {\n        console.log(\"DATA\", suivE_id, numeroRelance)\n\n        Axios.put(`/server/suiviExposant/updateDateContact/${numeroRelance}`, {\n            suivE_id: suivE_id, //row id=0 <==> soc_id = 1 --> d'où le +1\n            suivE_dateContact: value //'true' or 'false'\n        })\n    }\n\n    const updateStatusFacture = (data, value) => {\n\n        Axios.put(\"/serverreservations/updateReservationFacture\", {\n            res_id: data.res_id, //row id=0 <==> soc_id = 1 --> d'où le +1\n            res_facture: value //'true' or 'false'\n        })\n    }\n\n    const updateStatusBenevole = (data, value) => {\n        Axios.put(\"/serversuiviExposant/updateBenevole\", {\n            suivE_id: data.suivE_id,\n            suivE_benevole: value\n        })\n    }\n\n    const updateStatusWorkflow = (data, value) => {\n        Axios.put(\"/serversuiviExposant/updateWorkflow\", {\n            suivE_id: data.suivE_id,\n            suivD_id: value\n        })\n        window.location.reload()\n    }\n\n    const setAllAbsent = () => {\n        Axios.put(\"/serversuiviExposant/setAllAbsent\").then(\n            (response) => {\n                console.log(\"NOMBRE CONSIDERE ABS\", response)\n            }\n        )\n\n    }\n\n    /**\n     * This method is declaring all the columns for the table\n     *\n     * @type {[{Header: (function(): null), id: string, Cell: (function({row: *}))}, {Header: string, accessor: string}, {filter: string, Header: string, Filter: (function({column: {filterValue: *, setFilter: *, preFilteredRows: *, id?: *}}): *), accessor: (function(*): string), id: string, disableSortBy: boolean, Cell: (function(*))}]}\n     */\n    const columns = useMemo(() => [\n            {\n                //This column is used for displaying more/less details\n                Header: () => null,\n                id: 'expander', // 'id' is required\n\n                Cell: ({row}) => (\n                    <span {...row.getToggleRowExpandedProps()}>\n                        {row.isExpanded ? <FontAwesomeIcon className=\"faiconDetail\" icon={faEyeSlash}/> :\n                            <FontAwesomeIcon className=\"faiconDetail\" icon={faInfoCircle}/>}\n                    </span>\n                ),\n            },\n            {\n                Header: \"Nom\",\n                accessor: \"soc_nom\",\n            },\n            {\n                Header: \"Commentaire\",\n                accessor: d => d,\n\n                Cell: row => {\n                    return (\n                        <Form.Control as={\"textarea\"}\n                                      value={row.value.suivi_exposants.length == 0 ? \"\" : row.value.suivi_exposants[0].suivE_commentaire}>\n                        </Form.Control>\n                    )\n                }\n            },\n\n            {\n                Header: \"WorkFlow\",\n                accessor: d => d.suivi_exposants.length == 0 ? null : d.suivi_exposants[0].suivD_id.toString(), //required cast from boolean to string\n\n                disableSortBy: true,\n                Filter: SelectColumnFilter,\n                filter: 'equals',\n\n                Cell: row => {\n                    return (\n                        <div>\n                            {\n                                console.log(\"ROW VALUE\", row.value)\n                            }\n                            <Form.Control as={\"select\"}\n                                          onChange={(e) => updateStatusWorkflow(row.row.original.suivi_exposants[0], e.target.value)}\n                                          style={{backgroundColor: row.value ==  null ? 'default' : options.find(element => element.id === parseInt(row.value)).color}}>\n                                {\n                                    optionsDiscussion.map((option) =>\n                                        <option value={option.suivD_id}\n                                                selected={option.suivD_id == parseInt(row.value)}\n                                                key={option.suivD_id}\n                                                style={{backgroundColor: options.find(element => element.id === parseInt(option.suivD_id)).color}}>\n                                            {option.suivD_libelle}\n                                        </option>\n                                    )\n                                }\n                            </Form.Control>\n                        </div>\n                    )\n                }\n\n            },\n            {\n                id: \"espaceQte\",\n                Header: \"Tables\",\n                accessor: d => d.reservations.length == 0 ? \"NULL\" : String(`${d.reservations[0].espace.esp_qte}` + ' ' + `${d.reservations[0].espace.esp_enTables == 0 ? \"m²\" : \"Tables\"}`), //required cast from boolea to string\n            },\n            {\n                id: \"benevoles\",\n                Header: \"Bénévoles\",\n                accessor: d => d.suivi_exposants.length == 0 ? null : d.suivi_exposants[0].suivE_benevole.toString(), //required cast from boolean to string\n\n                //Allows column to be sorted depending on all content type (true/false)\n                disableSortBy: true,\n                Filter: SelectColumnFilter,\n                filter: 'equals',\n\n                Cell: row => {\n                    return (\n                        <div style={{'textAlign': 'center'}}>\n                            <input\n                                type=\"checkbox\"\n                                disabled={row.value == null}\n                                defaultChecked={(row.value == null || row.value == 'false') ? false : true}\n                                onChange={(event) => updateStatusBenevole(row.row.original.suivi_exposants[0], event.target.checked ? 1 : 0)}\n                            />\n                        </div>)\n                },\n            },\n            {\n                id: \"facture\",\n                Header: \"Facture\",\n                accessor: d => d.reservations.length == 0 ? null : d.reservations[0].res_facture.toString(), //required cast from boolean to string\n\n\n                //Allows column to be sorted depending on all content type (true/false)\n                disableSortBy: true,\n                Filter: SelectColumnFilter,\n                filter: 'equals',\n\n                Cell: row => {\n                    return (\n                        <div style={{'textAlign': 'center'}}>\n                            <input\n                                disabled={row.value == null ? true : false}\n                                type=\"checkbox\"\n                                defaultChecked={(row.value == null || row.value == 'false') ? false : true}\n                                onChange={(event) => updateStatusFacture(row.row.original.reservations[0], event.target.checked ? 1 : 0)}\n                            />\n                        </div>)\n                },\n            },\n\n        ], [optionsDiscussion, societe]\n    )\n\n    /**\n     * This method is used to display more details for a given object\n     * It is actived when clicking on the first column for a specific row\n     *\n     * @param row\n     * @returns {JSX.Element}\n     */\n    const detailsExposant = (row) => {\n\n        let suivE_dateContact1 = null\n        let suivE_dateContact2 = null\n        let suivE_dateContact3 = null\n        let suivE_id = null\n\n        if (row.original.suivi_exposants.length != 0) {\n            suivE_dateContact1 = row.original.suivi_exposants[0].suivE_dateContact1;\n            suivE_dateContact2 = row.original.suivi_exposants[0].suivE_dateContact2;\n            suivE_dateContact3 = row.original.suivi_exposants[0].suivE_dateContact3;\n            suivE_id = row.original.suivi_exposants[0].suivE_id;\n\n        }\n\n        const contacts = row.original.contacts;\n\n        //Name of the attributes in a societe\n        const {\n            soc_nom,\n            soc_rue,\n            soc_ville,\n            soc_codePostal,\n            soc_id\n        } = row.original;\n\n        //Display the cards (more details)\n        return (\n            <div style={{columnCount: 2, display: 'flex', padding: '1rem'}}>\n                <Card style={{width: '50%', margin: '0 auto', marginRight: '1rem'}}>\n                    <CardBody>\n                        {\n                            console.log(\"SUIVE ID\", suivE_id)\n                        }\n                        <CardTitle>\n                            <strong>{`${soc_nom}`} </strong>\n                        </CardTitle>\n                        <CardText>\n                            <strong>Address : </strong>\n                            {`${soc_rue} ${soc_ville} - ${soc_codePostal}`}\n                        </CardText>\n                        <CardText>\n                            <strong>Date contact 1 </strong>\n                            <input type={'date'}\n                                   defaultValue={`${suivE_dateContact1}`}\n                                   onChange={(event) => updateDateContact(suivE_id, event.target.value, 1)}\n                            />\n                        </CardText>\n                        <CardText>\n                            <strong>Date contact 2 </strong>\n                            <input type={'date'}\n                                   defaultValue={`${suivE_dateContact2}`}\n                                   onChange={(event) => updateDateContact(suivE_id, event.target.value, 2)}\n                            />\n                        </CardText>\n                        <CardText>\n                            <strong>Date contact 3 </strong>\n                            <input type={'date'}\n                                   defaultValue={`${suivE_dateContact3}`}\n                                   onChange={(event) => updateDateContact(suivE_id, event.target.value, 3)}\n                            />\n                        </CardText>\n                    </CardBody>\n                </Card>\n\n\n                <Card style={{width: '50%', margin: '0 auto'}}>\n                    <CardBody>\n                        <CardTitle>\n                            <strong> Contacts </strong>\n                        </CardTitle>\n                        {\n                            contacts.map((contact) => {\n                                return (\n                                    <CardContact props={contact}/>\n                                )\n                            })\n                        }\n\n                        {/*                        <div id=\"newContact\">\n                            <Container triggerText=\"Créer un nouveau contact\"\n                                       onSubmit={onSubmitContact}\n                                       component={FormContact}/>\n                        </div>*/}\n                    </CardBody>\n                </Card>\n            </div>\n        );\n    };\n\n    /*    const onSubmitContact = (event) => {\n            event.preventDefault(event);\n\n            console.log(\"CONTACT\", event)\n\n\n            Axios.post(`/server/contacts/add/${soc_id}`, {\n                co_nom: event.target.value.nom,\n                co_prenom: event.target.value.prenom,\n                co_telPortable: event.target.value.telPortable,\n                co_telFixe: event.target.value.telFixe,\n                co_rue: event.target.value.ville,\n                co_codePostal: event.target.value.codePostal,\n                co_fonction: event.target.value.fonction\n            }).then((response) => {\n                console.log(\"RESPONSE\", response)\n            })\n        }*/\n\n    const onSubmit = (event) => {\n        event.preventDefault(event);\n\n        console.log(\"PAS LA stp\")\n\n        Axios.post(\"/serversociete/add\", {\n            soc_nom: event.target.nom.value,\n            soc_ville: event.target.ville.value,\n            soc_rue: event.target.rue.value,\n            soc_codePostal: event.target.codePostal.value,\n            soc_pays: event.target.pays.value\n        }).then((response) => {\n            console.log(response)\n        })\n    }\n\n    /**\n     * Display the table\n     *\n     * required :\n     *      the columns set up above\n     *      the data (list of societes)\n     * optional :\n     *      {renderRowSubComponent} only if you want the ability to display more details\n     */\n    return (\n        <div style={{marginTop: `50px`}} className=\"EspaceFooter\">\n            <Button onClick={setAllAbsent}> Mettre tous les exposant absent </Button>\n            <TableContainer columns={columns} data={societe} renderRowSubComponent={detailsExposant}/>\n        </div>\n    )\n}\n\n","import Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport React, {useState} from \"react\";\n\n\nexport const RegisterForm = ({ onSubmit }) => {\n    const [email, setEmail] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [estAdmin, setEstAdmin] = useState(false);\n\n    function validateForm() {\n        return email.length > 0 && password.length > 0;\n    }\n\n\n    return(\n\n        <Form onSubmit={onSubmit}>\n            <h4 id=\"titleGameForm\"> Créer un compte</h4>\n\n            <Form.Group size=\"lg\" controlId=\"email\">\n                <Form.Label>Email</Form.Label>\n                <Form.Control\n                    autoFocus\n                    type=\"email\"\n                    value={email}\n                    onChange={(e) => setEmail(e.target.value)}\n                />\n            </Form.Group>\n            <Form.Group size=\"lg\" controlId=\"password\">\n                <Form.Label>Mot de passe</Form.Label>\n                <Form.Control\n                    type=\"password\"\n                    value={password}\n                    onChange={(e) => setPassword(e.target.value)}\n                />\n            </Form.Group>\n            <Form.Group size=\"lg\" controlId=\"role\">\n                <Form.Check inline label=\"admin\"  value={estAdmin} onChange={(e)=> setEstAdmin(e.target.checked)} />\n                <p>*Si cette case n'est pas coché, ce sera un compte organisateur.</p>\n            </Form.Group>\n            <div className=\"form-group\">\n            <Button id=\"btn-valider\" block size=\"lg\" type=\"submit\" disabled={!validateForm()}>\n                Créer le compte\n            </Button>\n            </div>\n        </Form>\n    );\n};\nexport default RegisterForm;","import React, {useEffect, useMemo, useState} from \"react\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faUser} from \"@fortawesome/free-solid-svg-icons\";\n\nimport './handle-accounts.css'\nimport Alert from \"react-bootstrap/Alert\";\nimport RegisterForm from \"./registerForm\"\nimport {Container} from \"../../components/ModalForm/container\";\nimport Axios from \"axios\";\nimport FormText from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\"\n\nimport TableContainer from \"../../components/tables/TableContainer\";\nimport {SelectColumnFilter} from \"../../components/tables/Filters\";\n\n\n\n\nexport default function HandleAccounts(){\n    const [errortext, setErrortext] = useState(\"\");\n    const [show, setShow] = useState(false)\n    const [userList,setUserList] = useState([]);\n\n    const onSubmit = (event) => {\n\n        //Ne pas oublier cette ligne!!!\n        event.preventDefault(event);\n\n\n        Axios.post(\"/serverregister\", {\n            //récupérer les valeurs du formulaire\n            email: event.target.email.value,\n            password : event.target.password.value,\n            estAdmin : event.target.role.value,\n\n        }).then((res) => {\n            //afficher alert succes\n                    if (res.data.success) {\n                        //afficher message de réussite\n                        console.log(\"compte crée\")\n                        setShow(true)\n                    } else {\n                        setErrortext(res.data.error);\n                    }\n        })\n    };\n    //méthode qui s'appelle au chargement de la page\n    useEffect(() => {\n        //Récupérer les infos de tous les users\n        Axios.get(\"/serverallUsers\")\n            .then((res) => {\n                setUserList(res.data);\n            });\n\n    }, []);\n\n\n\n    const deleteUser = (data) => {\n\n        Axios.delete(`/server/delete-profile/${data.user_email}`)\n            .then(\n                //userList.splice(userList.indexOf(data),1)\n                window.location.reload(false)\n            )\n\n\n\n    }\n\n    const columns = useMemo(() => [\n        {\n            Header: \"User\",\n            accessor: \"user_email\"\n        },\n        {\n            Header: \"Admin\",\n            accessor: d => d.user_estAdmin != null ? d.user_estAdmin.toString() : null, //required cast from boolea to string\n\n            disableSortBy: true,\n            Filter: SelectColumnFilter,\n            filter: 'equals',\n\n        },\n        {\n            id: 'supprimer',\n\n            Cell: row => {\n                return (\n                    <div>\n                        <Button id=\"btndelete\" onClick={(e) => deleteUser(row.row.original)}>Supprimer</Button>\n                    </div>\n                    )\n            },\n\n\n        }\n        ], [userList])\n\n    return (\n        <div className=\"EspaceFooter\">\n            <div id=\"titlePageJeux\">\n                <h1>\n                    <FontAwesomeIcon className=\"faicon\" icon={faUser}/>\n                    Gérer les comptes\n                </h1>\n            </div>\n            <Alert id=\"alertSucces\" variant=\"success\" show={show}>\n                Compté crée avec succès!\n            </Alert>\n\n            {/* equivalent du if/else */}\n            {errortext !== \"\" ? (\n                <FormText id=\"errorLabel\">{errortext}</FormText>\n            ) : null}\n            <div id=\"btn-NewUser\">\n                <Container triggerText=\"Créer un nouveau compte\" onSubmit={onSubmit} component={RegisterForm}/>\n            </div>\n\n            <div style={{marginTop: `50px`}}>\n                <TableContainer columns={columns} data={userList}/>\n            </div>\n\n\n        </div>\n    );\n}\n","import React, {useEffect, useState} from \"react\";\nimport Card from \"@material-ui/core/Card\";\nimport {CardBody, CardText, CardTitle} from \"reactstrap\";\nimport Axios from \"axios\";\nimport NumberFormat from 'react-number-format';\nimport Moment from \"moment\";\nimport Form from \"react-bootstrap/Form\";\nimport Alert from \"react-bootstrap/Alert\";\nimport Button from \"react-bootstrap/Button\";\nimport FormText from \"react-bootstrap/FormText\";\n\nconst FormLocalisation = ({onSubmitLocalisation}) => {\n    const [loc_libelle, setLibelle] = useState(\"\");\n    const [loc_prixTable, setPrixTable] = useState(0);\n    const [loc_prixM2, setPrixM2] = useState(0);\n\n    const [errortext, setErrortext] = useState(\"\");\n\n\n    function validateForm() {\n        return loc_libelle.length > 0;\n    }\n\n    return (\n        <div>\n            <div className=\"CreateFestival\">\n                <Form onSubmit={onSubmitLocalisation}>\n                    {errortext !== \"\" ? (\n                        <FormText id=\"errorLabel\">{errortext}</FormText>\n                    ) : null}\n                    <h4 id=\"titleForm\">Création d'un espace</h4>\n                    <Form.Group size=\"lg\" controlId=\"loc_libelle\">\n                        <Form.Label>Nom de l'espace *</Form.Label>\n                        <Form.Control\n                            type=\"text\"\n                            value={loc_libelle}\n                            onChange={(e) => setLibelle(e.target.value)}\n                        />\n                    </Form.Group>\n                    <Form.Group size=\"lg\" controlId=\"loc_prixTable\">\n                        <Form.Label>Prix d'une table </Form.Label>\n                        <Form.Control\n                            type=\"text\"\n                            min=\"0\"\n                            value={loc_prixTable}\n                            onChange={(e) => setPrixTable(e.target.value)}\n                        />\n                    </Form.Group>\n                    <Form.Group size=\"lg\" controlId=\"loc_prixM2\">\n                        <Form.Label>Prix d'un m² </Form.Label>\n                        <Form.Control\n                            type=\"text\"\n                            min=\"0\"\n                            value={loc_prixM2}\n                            onChange={(e) => setPrixM2(e.target.value)}\n                        />\n                    </Form.Group>\n                    <p>* Champ obligatoire</p>\n                    <div className=\"form-group\">\n                        <Button id=\"btn-formFestival\" block size=\"lg\" type=\"submit\" disabled={!validateForm()}>\n                            Créer l'espace\n                        </Button>\n                    </div>\n                </Form>\n            </div>\n        </div>\n    );\n}\n\nexport default FormLocalisation;","import React, {useEffect, useState} from 'react';\nimport Alert from \"react-bootstrap/Alert\";\nimport Form from \"react-bootstrap/Form\";\nimport FormText from \"react-bootstrap/FormText\";\nimport {Input} from \"reactstrap\";\nimport Button from \"react-bootstrap/Button\";\n\nimport './FormFestival.css';\nimport FormLocalisation from \"../../components/festivals/FormLocalisation\";\nimport Axios from \"axios\";\n\n\nconst FormFestival = ({onSubmit}) => {\n\n    const [fes_date, setDate] = useState(\"\");\n    const [fes_nbTables, setNbTables] = useState(0);\n    const [festival, setFestival] = useState();\n    const [errortext, setErrortext] = useState(\"\");\n\n    const [showFestival, setShowFestival] = useState(false);\n\n    function validateForm() {\n        return fes_date.length > 0;\n    }\n\n    /*\n    function submitFestival(event) {\n        //variable to send in json format\n        let dataToSend = JSON.stringify({\n            fes_date,\n            fes_nbTables\n        });\n\n        fetch(\"/serverfestivals/add\", {\n            method: \"POST\",\n            body: dataToSend,\n            headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\",\n            },\n        }).then((res) => {\n\n            // If response was successful parse the json and dispatch an update\n            if (res.ok) {\n                res.json().then((resJson) => {\n                    if (resJson.success) {\n                        //afficher message de réussite\n                        console.log(\"festival créé\")\n                        setShowFestival(true)\n                    } else {\n                        setErrortext(resJson.error);\n                    }\n                })\n            }\n        });\n    }\n*/\n\n    return (\n        <div>\n            <div className=\"CreateFestival\">\n                <Form onSubmit={onSubmit}>\n                    {errortext !== \"\" ? (\n                        <FormText id=\"errorLabel\">{errortext}</FormText>\n                    ) : null}\n                    <h4 id=\"titleFestivalForm\">Création d'un festival</h4>\n                    <Form.Group size=\"lg\" controlId=\"fes_date\">\n                        <Form.Label>Date du festival *</Form.Label>\n                        <Form.Control\n                            autoFocus\n                            type=\"date\"\n                            value={fes_date}\n                            onChange={(e) => setDate(e.target.value)}\n                        />\n                    </Form.Group>\n                    <Form.Group size=\"lg\" controlId=\"fes_nbTables\">\n                        <Form.Label>Nombre de tables total </Form.Label>\n                        <Form.Control\n                            type=\"text\"\n                            min=\"0\"\n                            value={fes_nbTables}\n                            onChange={(e) => setNbTables(e.target.value)}\n                        />\n                    </Form.Group>\n                    <p>* Champ obligatoire</p>\n                    <div className=\"form-group\">\n                        <Button id=\"btn-formFestival\" block size=\"lg\" type=\"submit\" disabled={!validateForm()}>\n                            Créer le festival\n                        </Button>\n                    </div>\n                </Form>\n            </div>\n        </div>\n    )\n};\n\nexport default FormFestival;","import React, {Fragment} from 'react';\nimport {\n    useTable,\n    useSortBy,\n    useExpanded,\n    usePagination,\n} from 'react-table';\nimport {Table, Row, Col, Button, Input, CustomInput} from 'reactstrap';\nimport {Filter} from './Filters';\n\nconst SimpleTableContainer = ({columns, data, renderRowSubComponent}) => {\n    const {\n        getTableProps,\n        getTableBodyProps,\n        headerGroups,\n        page,\n        prepareRow,\n        visibleColumns,\n        state: {pageIndex}\n    } = useTable(\n        {\n            columns,\n            data,\n            initialState: {pageIndex: 0},\n        },\n        useSortBy,\n        useExpanded,\n        usePagination\n    );\n\n    const generateSortingIndicator = (column) => {\n        return column.isSorted ? (column.isSortedDesc ? ' 🔽' : ' 🔼') : '';\n    };\n\n    return (\n        <Fragment>\n            <Table bordered hover {...getTableProps()} style={{width: '100%'}}>\n\n                {/* En-tete du tableau (avec les menu de recherches/tris)*/}\n                <thead>\n                {headerGroups.map((headerGroup) => (\n                    <tr  {...headerGroup.getHeaderGroupProps()}>\n                        {headerGroup.headers.map((column) => (\n                            <th {...column.getHeaderProps()}>\n                                <div {...column.getSortByToggleProps()}>\n                                    {column.render('Header')}\n                                    {generateSortingIndicator(column)}\n                                </div>\n                                <Filter column={column}/>\n                            </th>\n                        ))}\n                    </tr>\n                ))}\n                </thead>\n\n\n                {/* Affichage des données*/}\n                <tbody {...getTableBodyProps()} style={{width: 'auto'}}>\n                {page.map((row) => {\n\n                    prepareRow(row);\n                    return (\n                        <Fragment key={row.getRowProps().key}>\n\n                            {/* Contenu pour chaque ligne*/}\n                            <tr>\n                                {row.cells.map((cell) => {\n                                    return (\n                                        <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                                    );\n                                })}\n                            </tr>\n\n                            {/* Affichage du contenu supplémentaire (details) */}\n                            {row.isExpanded && (\n                                <tr>\n                                    <td colSpan={visibleColumns.length}>\n                                        {renderRowSubComponent(row)}\n                                    </td>\n                                </tr>\n                            )}\n\n                        </Fragment>\n                    );\n                })}\n                </tbody>\n            </Table>\n        </Fragment>\n    );\n};\n\nexport default SimpleTableContainer;","import React, {useEffect, useState, useMemo} from \"react\";\nimport Card from \"@material-ui/core/Card\";\nimport {CardBody, CardText, CardTitle} from \"reactstrap\";\nimport Axios from \"axios\";\nimport NumberFormat from 'react-number-format';\nimport Moment from \"moment\";\nimport FormLocalisation from \"./FormLocalisation\";\nimport {Container} from \"../ModalForm/container\";\nimport \"./CardFestival.css\";\nimport Alert from \"react-bootstrap/Alert\";\nimport SimpleTableContainer from \"../../components/tables/SimpleTableContainer\";\nimport Form from \"react-bootstrap/Form\";\n\n\nconst CardFestival = ({fes, updateDate, updateNbTables}) => {\n\n    const [festivalDate, setDate] = useState(fes.fes_date)\n    const [localisationList, setLocalList] = useState([])\n    const [show, setShow] = useState(false) // for the form of the localisation\n\n    useEffect(() => {\n        // Get details for the festivals\n        Axios.get(`/server/localisation/allDetails/${fes.fes_id}`)\n            .then((res) => {\n                setLocalList(res.data)\n            })\n    }, []);\n\n    const changeDate = event => {\n        updateDate(fes.fes_id, event.target.value) // update in the database\n        setDate(event.target.value) // update the value of the input calendar\n    }\n\n    const changeNbTables = event => {\n        updateNbTables(fes.fes_id, event.target.value)\n    }\n\n    /**\n     * Method called when the form is validated\n     * @param event\n     */\n    const onSubmitLocalisation = (event) => {\n        event.preventDefault(event);\n        //get the information of the form\n        console.log(\"front lib :\", event.target.loc_libelle.value);\n        console.log(\"front id : \", fes.fes_id);\n        Axios.post(`/server/localisation/add/${fes.fes_id}`, {\n            loc_libelle: event.target.loc_libelle.value,\n            loc_prixTable: event.target.loc_prixTable.value,\n            loc_prixM2: event.target.loc_prixM2.value\n        })\n            .then((res) => {\n                // to show the success with an alert\n                setShow(true);\n            })\n    }\n\n    /**\n     * Method to update the unit price of the table\n     * @param rowIndex\n     * @param data\n     * @param value\n     */\n    function updatePriceTable(rowIndex, data, value) {\n        const loc_id = data[rowIndex].loc_id;\n        Axios.put(\"/serverlocalisation/updatePriceTable/\", {\n            loc_id : loc_id,\n            new_priceTable : value\n        });\n    }\n\n    /**\n     * Method to update the price of m²\n     * @param rowIndex\n     * @param data\n     * @param value\n     */\n    function updatePriceM2(rowIndex, data, value) {\n        const loc_id = data[rowIndex].loc_id;\n        Axios.put(\"/serverlocalisation/updatePriceM2/\", {\n            loc_id : loc_id,\n            new_priceM2 : value\n        });\n    }\n\n    const columns = useMemo(() => [\n        {\n            Header: \"Nom\",\n            accessor: \"loc_libelle\"\n        }, {\n            Header: \"Prix table\",\n            accessor: \"loc_prixTable\",\n            Cell: row => {\n                return (\n                    <Form.Control\n                        autoFocus\n                        type=\"text\"\n                        min=\"0\"\n                        defaultValue={row.value}\n                        onChange={(e) => updatePriceTable(row.row.id, row.data, e.target.value)}\n                    />\n                )\n            }\n        }, {\n            Header: \"Prix m²\",\n            accessor: \"loc_prixM2\",\n            Cell: row => {\n                return (\n                    <Form.Control\n                        autoFocus\n                        type=\"text\"\n                        min=\"0\"\n                        defaultValue={row.value}\n                        onChange={(e) => updatePriceM2(row.row.id, row.data, e.target.value)}\n                    />\n                )\n            }\n        }\n    ], [localisationList])\n\n\n\n    return (\n        <div>\n            <Alert id=\"alertSucces\" variant=\"success\" show={show}>\n                Espace créé avec succès!\n            </Alert>\n            <Card className=\"card\">\n                <CardBody>\n                    <CardTitle>\n                        <strong>Festival du {Moment(festivalDate).format('DD/MM/YYYY')}</strong>\n                    </CardTitle>\n                    <CardText>\n                        Date\n                        <input type={'date'}\n                               className=\"inputCss\"\n                               value={festivalDate}\n                               onChange={changeDate}\n\n                        />\n                    </CardText>\n                    <CardText>\n                        Nombre de tables\n                        <NumberFormat\n                            className=\"inputCss\"\n                            value={fes.fes_nbTables}\n                            onChange={changeNbTables}\n                        />\n                    </CardText>\n                    <div className=\"tableLocalisation\">\n                        <SimpleTableContainer columns={columns} data={localisationList}/>\n                    </div>\n                    <Container triggerText=\"Créer un nouvel espace\" onSubmit={onSubmitLocalisation}\n                               component={FormLocalisation}/>\n                </CardBody>\n            </Card>\n        </div>\n    );\n}\n\nexport default CardFestival;\n","import {isAdmin} from \"../../utils/utils\";\n\nimport React, {useEffect, useState} from \"react\";\nimport './Festivals.css';\nimport FormFestival from './FormFestival';\nimport {Container} from \"../../components/ModalForm/container\";\nimport CardFestival from \"../../components/festivals/CardFestival\";\nimport Axios from \"axios\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faTheaterMasks} from \"@fortawesome/free-solid-svg-icons\";\nimport Alert from \"react-bootstrap/Alert\";\n//const CardFestival = require('')\n\nconst Festivals = () => {\n\n    const [form, setForm] = useState(false)\n    const [festivals, setListFestivals] = useState([]);\n\n    const [show, setShow] = useState(false)\n\n    /**\n     * Method which is called at the loading of the page\n     * to show all the festivals\n     */\n    useEffect(() => {\n        Axios.get(\"/serverFestivals/allDetails\")\n            .then((res) => {\n                setListFestivals(res.data.allFestivals)\n            });\n    }, []);\n\n    /**\n     * Method called when the form is validated\n     * @param event\n     */\n    const onSubmit = (event) => {\n        event.preventDefault(event);\n        //get the information of the form\n        Axios.post(\"/serverfestivals/add\", {\n            fes_date: event.target.fes_date.value,\n            fes_nbTables: event.target.fes_nbTables.value\n        })\n            .then((res) => {\n                // to show the success with an alert\n                setShow(true);\n            })\n    };\n\n    /**\n     * Method called by the input date to update the date of the festival of the card\n     * @param old_date : the current date\n     * @param new_date : the new date of the festival\n     */\n    const updateDateFestival = async (fes_id, new_date) => {\n        const res = await Axios.put(\"/serverfestivals/updateDate\", {\n            fes_id: fes_id,\n            new_date: new_date\n        })\n    }\n\n    /**\n     *\n     * @param fes_date\n     * @param new_number\n     */\n    const updateNbTables = (fes_id, new_nbTables) => {\n        Axios.put(\"/serverfestivals/updateNbTables\", {\n            fes_id : fes_id,\n            new_nbTables : new_nbTables\n        })\n    }\n\n    //ATTENTION : faire if  isAdmin la page admin else la page organisateur\n    return (\n        <>\n            <div className=\"EspaceFooter\">\n                <div id=\"titlePageFestivals\">\n                    <h1>\n                        <FontAwesomeIcon className=\"faicon\" icon={faTheaterMasks}/>\n                        Festivals\n                    </h1>\n\n                </div>\n                <Alert id=\"alertSucces\" variant=\"success\" show={show}>\n                    Le festival a été créé !\n                </Alert>\n                <div id=\"btnNewFestival\">\n                    <Container triggerText=\"Créer un nouveau festival\" onSubmit={onSubmit} component={FormFestival}/>\n                </div>\n                <div className=\"flex-container\">\n                    {festivals.map((fest, i) =>\n                        <div id={fest} className=\"flex-item\" >\n                            <CardFestival fes={fest} updateDate={updateDateFestival} updateNbTables={updateNbTables}/>\n                        </div>\n                    )}\n                </div>\n            </div>\n        </>\n    )\n}\n\nexport default Festivals;\n","import React, {useState} from 'react';\n\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\n\nexport const FormType = ({onSubmit}) => {\n    const [libelle, setLibelle] = useState(\"\");\n\n    function validateForm(){\n        return libelle.length > 0;\n    }\n\n    return(\n        <Form onSubmit={onSubmit}>\n            <h4 id=\"titleGameForm\">Détails du jeu</h4>\n\n            <Form.Group size=\"lg\"  controlId=\"libelle\">\n                <Form.Label>Type de jeu*</Form.Label>\n                <Form.Control autoFocus value={libelle} onChange={(e) => setLibelle(e.target.value)} />\n            </Form.Group>\n\n            <p>* Champ obligatoire</p>\n\n\n            <div className=\"form-group\">\n                <Button id=\"btn-formGame\" block size=\"lg\" type=\"submit\" disabled={!validateForm()}>\n                    Valider\n                </Button>\n            </div>\n\n        </Form>\n    );\n};\nexport default FormType;\n","import React, {useEffect, useState, useMemo} from \"react\";\nimport Axios from \"axios\"\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faShapes} from \"@fortawesome/free-solid-svg-icons\";\nimport TableContainer from \"../../components/tables/TableContainer\";\nimport Form from \"react-bootstrap/Form\";\nimport Alert from \"react-bootstrap/Alert\";\nimport {Container} from \"../../components/ModalForm/container\";\nimport FormType from './formType';\n\nconst TypeJeu = () => {\n\n    const [gameTypeList, setGameTypeList] = useState([]);\n    const [show, setShow] = useState(false)\n\n\n    useEffect(() => {\n        //Récupérer tous les types\n        Axios.get(\"/servertypeJeu/all\")\n            .then((res) => {\n                setGameTypeList(res.data)\n            })\n    }, [])\n\n\n    const onSubmit = (event) => {\n        //Ne pas oublier cette ligne!!!\n        event.preventDefault(event);\n\n        Axios.post(\"/servertypeJeu/add\", {\n            libelle: event.target.libelle.value\n        }).then((res) => {\n            //afficher alert succes\n            setShow(true);\n        })\n\n    }\n\n    const updateType = (rowIndex, data, value) => {\n        const typJ_id = data[rowIndex].typJ_id\n        Axios.post(`/server/typeJeu/${typJ_id}/update`,{\n            libelle: value,\n        })\n    }\n\n    const columns = useMemo ( () => [\n        {\n            Header: 'Type de jeu',\n            accessor: 'typJ_libelle',\n            Cell: row => {\n                return (\n                    <Form.Control autoFocus  defaultValue={row.value}\n                                  onChange={(e) => updateType(parseInt(row.row.id), row.data, e.target.value)}/>\n\n                )\n            },\n        }\n    ], [gameTypeList])\n\n    return(\n        <div className=\"EspaceFooter\">\n            <div id=\"titlePageJeux\">\n                <h1>\n                    <FontAwesomeIcon className=\"faicon\" icon={faShapes}/>\n                    Type de jeux</h1>\n            </div>\n            <Alert id=\"alertSucces\" variant=\"success\" show={show}>\n                Le type a été crée avec succès!\n            </Alert>\n            <div id=\"btnNewJeu\">\n                <Container triggerText=\"Créer un nouveau type\" onSubmit={onSubmit} component={FormType}/>\n            </div>\n            <div style={{marginTop: `50px`}}>\n                <TableContainer columns={columns} data={gameTypeList}/>\n            </div>\n        </div>\n    )\n}\nexport default TypeJeu","import React, {useEffect, useState} from 'react';\nimport './formJeu.css'\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport Axios from \"axios\";\n\n\nexport const FormJeu = ({ onSubmit }) => {\n    const [title,setTitle] = useState(\"\");\n    const [minAge,setMinAge] = useState(\"\");\n    const [duration,setDuration] = useState(\"\");\n    const [maxNumPlayers,setMaxNumPlayers] = useState(\"\");\n    const [minNumPlayers,setMinNumPlayers] = useState(\"\");\n    const [rulesLink,setRulesLink] = useState(\"\");\n    const [companyId,setCompanyId] = useState(\"\");\n    const [gameTypeId,setGameTypeId] = useState(\"\");\n\n\n    const [gameTypeList,setGameTypeList] = useState([]);\n    const [editeursList,setEditeursList] = useState([]);\n\n\n\n\n    //méthode qui s'appelle au chargement de la page\n    useEffect(() => {\n        //Récupérer tous les types de jeux\n        Axios.get(\"/servertypeJeu/all\")\n            .then((res) => {\n               setGameTypeList(res.data)\n            })\n    }, []);\n\n    useEffect(() => {\n        //requetes tous les éditeurs\n        Axios.get(\"/serversociete/allEditeurs\")\n            .then((res) => {\n               setEditeursList(res.data)\n            })\n\n    }, []);\n\n    function validateForm() {\n        return title.length > 0 ;\n    }\n\n\n\n    return (\n\n        <Form onSubmit={onSubmit}>\n            <h4 id=\"titleGameForm\">Détails du jeu</h4>\n\n            <Form.Group size=\"lg\"  controlId=\"title\">\n                <Form.Label>Nom*</Form.Label>\n                <Form.Control autoFocus value={title} onChange={(e) => setTitle(e.target.value)} />\n            </Form.Group>\n            <Form.Group size=\"lg\"  controlId=\"minAge\">\n                <Form.Label>Age minimum</Form.Label>\n                <Form.Control autoFocus value={minAge} type=\"number\" min=\"0\"  onChange={(e) => setMinAge(e.target.value)} />\n            </Form.Group>\n            <Form.Group size=\"lg\"  controlId=\"duration\">\n                <Form.Label>Durée</Form.Label>\n                <Form.Control autoFocus value={duration} type=\"time\" onChange={(e) => setDuration(e.target.value)} />\n            </Form.Group>\n            <Form.Group size=\"lg\"  controlId=\"minNumPlayers\">\n                <Form.Label>Min joueurs</Form.Label>\n                <Form.Control autoFocus value={minNumPlayers} type=\"number\" min=\"0\" onChange={(e) => setMinNumPlayers(e.target.value)} />\n            </Form.Group>\n            <Form.Group size=\"lg\"  controlId=\"maxNumPlayers\">\n                <Form.Label>Max joueurs</Form.Label>\n                <Form.Control autoFocus value={maxNumPlayers} type=\"number\" min={minNumPlayers} onChange={(e) => setMaxNumPlayers(e.target.value)} />\n            </Form.Group>\n            <Form.Group size=\"lg\"  controlId=\"rulesLink\">\n                <Form.Label>Lien règles du jeu</Form.Label>\n                <Form.Control autoFocus value={rulesLink} type=\"url\" onChange={(e) => setRulesLink(e.target.value)} />\n            </Form.Group>\n            <Form.Group size=\"lg\"  controlId=\"gameTypeId\">\n                <Form.Label>Type de jeux</Form.Label>\n                <Form.Control autoFocus value={gameTypeId} as=\"select\" onChange={(e) => setGameTypeId(e.target.value)} >\n\n                {gameTypeList.map((object) =><option value={object.typJ_id}>{object.typJ_libelle} </option> )}\n                </Form.Control>\n            </Form.Group>\n            <Form.Group size=\"lg\"  controlId=\"companyId\">\n                <Form.Label>Éditeur</Form.Label>\n                <Form.Control autoFocus value={companyId} as=\"select\" onChange={(e) => setCompanyId(e.target.value)} >\n                    {editeursList.map((object) =><option value={object.soc_id}>{object.soc_nom} </option> )}\n                </Form.Control>\n            </Form.Group>\n\n            <p>* Champ obligatoire</p>\n\n\n            <div className=\"form-group\">\n                <Button id=\"btn-formGame\" block size=\"lg\" type=\"submit\" disabled={!validateForm()}>\n                    Valider\n                </Button>\n            </div>\n\n        </Form>\n    );\n};\nexport default FormJeu;\n","import './jeux.css'\nimport React, {useEffect, useState, useMemo} from \"react\";\nimport Axios from \"axios\"\n\nimport TableContainer from \"../../components/tables/TableContainer\";\nimport {SelectColumnFilter} from \"../../components/tables/Filters\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faChessKnight} from \"@fortawesome/free-solid-svg-icons\";\nimport {Container} from \"../../components/ModalForm/container\";\nimport FormJeu from \"./formJeu\";\nimport Form from \"react-bootstrap/Form\";\nimport Alert from \"react-bootstrap/Alert\";\n\nexport const Jeux = () => {\n\n\n\n    const [listeJeux, setListeJeux] = useState([]);\n    const [gameTypeList, setGameTypeList] = useState([]);\n    const [editeursList, setEditeursList] = useState([]);\n\n    const [show, setShow] = useState(false)\n\n\n    const onSubmit = (event) => {\n\n        //Ne pas oublier cette ligne!!!\n        event.preventDefault(event);\n\n        Axios.post(\"/serverjeux/add\", {\n            //récupérer les valeurs du formulaire\n            title: event.target.title.value,\n            minAge : event.target.minAge.value,\n            duration : event.target.duration.value,\n            maxNumPlayers : event.target.maxNumPlayers.value,\n            minNumPlayers : event.target.minNumPlayers.value,\n            rulesLink : event.target.rulesLink.value,\n            companyId : event.target.companyId.value,\n            gameTypeId : event.target.gameTypeId.value,\n        }).then((res) => {\n         //afficher alert succes\n            setShow(true);\n\n\n        })\n    };\n\n\n    //méthode qui s'appelle au chargement de la page\n    useEffect(() => {\n        //Récupérer les infos de tous les jeux\n        Axios.get(\"/serverJeux/allDetails\")\n            .then((res) => {\n\n                setListeJeux(res.data)\n            });\n\n    }, []);\n\n    useEffect(() => {\n        //Récupérer tous les types\n        Axios.get(\"/servertypeJeu/all\")\n            .then((res) => {\n                setGameTypeList(res.data)\n            })\n    }, [])\n\n    useEffect(() => {\n        //récupérer tous les éditeurs\n        Axios.get(\"/serversociete/allEditeurs\")\n            .then((res) => {\n                setEditeursList(res.data)\n            })\n    }, [])\n\n\n    // update Editeur\n    const updateEditeurId = (data, value) => {\n        Axios.post(`/server/Jeux/${data.j_id}/update-editeurId`, {\n            editeurId: value,\n        })\n    }\n    // updtate Type jeu\n    const updateGameTypeId = (data, value) => {\n        const j_id = data.j_id\n        Axios.post(`/server/Jeux/${j_id}/update-typeId`, {\n            typeId: value,\n        })\n    }\n    //update ageMin\n    const updateageMin = (rowIndex, data, value) => {\n        const j_id = data[rowIndex].j_id\n        Axios.post(`/server/Jeux/${j_id}/update-ageMin`, {\n            ageMin: value,\n        })\n    }\n    // update joueurs Min\n    const updatenbjMin = (rowIndex, data, value) => {\n        const j_id = data[rowIndex].j_id\n        Axios.post(`/server/Jeux/${j_id}/update-nbjMin`, {\n            nbjMin: value,\n        })\n    }\n    // update joueurs Max\n    const updatenbjMax = (rowIndex, data, value) => {\n        const j_id = data[rowIndex].j_id\n        Axios.post(`/server/Jeux/${j_id}/update-nbjMax`, {\n            nbjMax: value,\n        })\n    }\n\n    // update DUREE\n    const updateDuree = (rowIndex, data, value) => {\n        const j_id = data[rowIndex].j_id\n        Axios.post(`/server/Jeux/${j_id}/update-duree`, {\n            duree: value,\n        })\n    }\n\n    //  update NOTICE\n    const updateNotice = (rowIndex, data, value) => {\n        const j_id = data[rowIndex].j_id\n        Axios.post(`/server/Jeux/${j_id}/update-lienNotice`, {\n            lienNotice: value,\n        })\n    }\n\n    //déclarer toutes les colonnes\n    const columns = useMemo(() => [\n\n        {\n            Header: \"Nom\",\n            accessor: \"j_titre\",\n        },\n        {\n            Header: \"Éditeur\",\n            accessor: \"societe.soc_nom\",\n\n\n            disableSortBy: true,\n            Filter: SelectColumnFilter,\n            filter: 'equals',\n\n\n            Cell: row => {\n\n                return (\n                    <div>\n                        <Form.Group>\n                            <Form.Control style={{width: 'auto'}} as=\"select\" onChange={(e) => updateEditeurId(row.row.original, e.target.value)}>\n                                {editeursList.map((object, i) =>\n                                    <option selected={row.value === object.soc_nom} value={object.soc_id} key={object.soc_id} > {object.soc_nom}</option>\n                                )}\n                            </Form.Control>\n                        </Form.Group>\n                    </div>\n                )\n            }\n\n\n        },\n        {\n            Header: \"Type de jeu\",\n            accessor: \"type_jeu.typJ_libelle\",\n\n            disableSortBy: true,\n            Filter: SelectColumnFilter,\n            filter: 'equals',\n\n\n            Cell: row => {\n                return (\n                    <div>\n                        <Form.Group>\n                            <Form.Control style={{width: 'auto'}} as=\"select\" onChange={(e) => updateGameTypeId(row.row.original, e.target.value)}>\n                                {gameTypeList.map((object, i) =>\n                                    <option selected={row.value === object.typJ_libelle} value={object.typJ_id} key={object.typJ_id} > {object.typJ_libelle}</option>\n                                )}\n                            </Form.Control>\n                        </Form.Group>\n                    </div>\n                )\n            }\n\n\n        },\n        {\n            Header: \"Age min\",\n            accessor: \"j_ageMin\",\n            Cell: row => {\n                return (\n                    <Form.Control  autoFocus type=\"number\" min=\"0\" defaultValue={row.value}\n                                  onChange={(e) => updateageMin(parseInt(row.row.id), row.data, e.target.value)}/>\n                )\n            },\n        },\n        {\n            Header: \"nb joueurs min\",\n            accessor: \"j_nbMinJoueurs\",\n            Cell: row => {\n                return (\n                    <Form.Control autoFocus type=\"number\" min=\"0\" defaultValue={row.value}\n                                  onChange={(e) => updatenbjMin(parseInt(row.row.id), row.data, e.target.value)}/>\n                )\n            },\n        },\n        {\n            Header: \"nb joueurs max\",\n            accessor: \"j_nbMaxJoueurs\",\n            Cell: row => {\n                return (\n                    <Form.Control autoFocus type=\"number\" min={row.row.original.j_nbMinJoueurs} defaultValue={row.value}\n                                  onChange={(e) => updatenbjMax(parseInt(row.row.id), row.data, e.target.value)}/>\n                )\n            },\n        },\n        {\n            Header: \"Durée\",\n            accessor: \"j_duree\",\n\n            Cell: row => {\n                return (\n                    <Form.Control autoFocus type=\"time\" defaultValue={row.value}\n                                  onChange={(e) => updateDuree(parseInt(row.row.id), row.data, e.target.value)}/>\n\n                )\n            },\n        },\n        {\n            Header: \"Notice\",\n            accessor: \"j_lienNotice\",\n\n            Cell: row => {\n                return (\n                    <Form.Control autoFocus type=\"url\" defaultValue={row.value}\n                                  onChange={(e) => updateNotice(parseInt(row.row.id), row.data, e.target.value)}/>\n\n                )\n            },\n        }\n    ], [listeJeux, editeursList, gameTypeList]) //les variables du tableau\n\n\n    return (\n        <div className=\"EspaceFooter\">\n            <div id=\"titlePageJeux\">\n                <h1>\n                    <FontAwesomeIcon className=\"faicon\" icon={faChessKnight}/>\n                    Jeux\n                </h1>\n\n            </div>\n            <Alert id=\"alertSucces\" variant=\"success\" show={show}>\n                Le jeu a été crée avec succès!\n            </Alert>\n            <div id=\"btnNewJeu\">\n                <Container triggerText=\"Créer un nouveau jeu\" onSubmit={onSubmit} component={FormJeu}/>\n            </div>\n            <div style={{marginTop: `50px`}}>\n                <TableContainer columns={columns} data={listeJeux}/>\n            </div>\n        </div>\n    )\n}\n\n","import {isLogin} from \"../utils/utils\";\nimport {Route, Redirect} from \"react-router-dom\";\n\nconst PrivateRoute = ({component: Component, ...rest}) => {\n\n    return (\n        <Route {...rest} render={props => {\n\n            const redirection = {\n                pathname: \"/login\",\n                state: {\n                    from: props.location\n                }\n            }\n            return !isLogin() ? <Redirect to={redirection}/> : <Component {...props}/>\n        }}/>\n    )\n}\n\nexport default PrivateRoute\n","import './festival-games.css'\nimport {isLogin} from \"../../utils/utils\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faDice, faInfoCircle, faEyeSlash} from \"@fortawesome/free-solid-svg-icons\";\nimport React, {useEffect, useMemo, useState} from \"react\";\nimport Axios from \"axios\";\nimport {useHistory} from \"react-router\"\nimport TableContainer from \"../../components/tables/TableContainer\";\nimport {SelectColumnFilter} from \"../../components/tables/Filters\";\nimport {CardBody, CardLink, CardText, CardTitle} from \"reactstrap\";\nimport {Card, Form} from \"react-bootstrap\";\nimport Moment from \"moment\";\nimport {Link} from \"react-router-dom\";\n\nconst FestivalGames = () => {\n    const [listeJeux, setListeJeux] = useState([]);\n    const [editeursList, setEditeursList] = useState([]);\n    const [gameTypeList, setGameTypeList] = useState([]);\n    const [zoneList, setZoneList] = useState([]);\n\n    const history = useHistory();\n\n\n    //méthode qui s'appelle au chargement de la page\n    useEffect(() => {\n        //Récupérer les infos de tous les jeux\n        Axios.get(`/server/jeuxFestival/${localStorage.getItem(\"currentFestival\")}/allDetails`)\n            .then((res) => {\n                setListeJeux(res.data)\n                console.log(res.data)\n            });\n\n    }, []);\n\n    useEffect(() => {\n        //récupérer tous les éditeurs\n        Axios.get(\"/serversociete/allEditeurs\")\n            .then((res) => {\n                setEditeursList(res.data)\n            })\n    }, [])\n\n    useEffect(() => {\n        //Récupérer tous les types\n        Axios.get(\"/servertypeJeu/all\")\n            .then((res) => {\n                setGameTypeList(res.data)\n            })\n    }, [])\n\n    useEffect(() => {\n        Axios.get(`/server/zones/all/${localStorage.getItem(\"currentFestival\")}`)\n            .then((res) => {\n                setZoneList(res.data)\n            })\n    }, [])\n\n\n    //redirection page suivi éditeur\n    const goToExhibitorMonitoring = (soc_id) => {\n\n        history.push('/exhibitor-monitoring/' + soc_id);\n\n        window.location.reload(false)\n\n    }\n\n    // update Editeur\n    const updateEditeurId = (data, value) => {\n        Axios.post(`/server/Jeux/${data.j_id}/update-editeurId`, {\n            editeurId: value,\n        }).then((res) => {\n            console.log(res)\n        })\n    }\n\n    // updtate Type jeu\n    const updateGameTypeId = (data, value) => {\n        Axios.post(`/server/Jeux/${data.j_id}/update-typeId`, {\n            typeId: value,\n        }).then((res) => {\n            console.log(res)\n        })\n    }\n\n    //update prototype\n    const updatePrototype = (data, value) => {\n\n        Axios.post(`/server/jeuxFestival/update-prototype/${data.suivJ_id}`, {\n            suivJ_prototype: value,\n        })\n            .then((res) => {\n                console.log(res)\n            })\n    }\n\n    //update zone\n    const updateZone = (data, value) => {\n        Axios.post(`/server/jeuxFestival/update-zone/${data.suivJ_id}`, {\n            zo_id: value,\n        })\n            .then((res) => {\n                console.log(res)\n            })\n    }\n    //update place\n    const updatePlace = (data, value) => {\n        Axios.post(`/server/JeuxFestival/update-place/${data.suivJ_id}`, {\n            suivJ_place: value,\n        })\n            .then((res) => {\n                console.log(res)\n            })\n    }\n\n    //update tombola\n    const updateTombola = (data, value) => {\n\n        Axios.post(`/server/JeuxFestival/update-tombola/${data.suivJ_id}`, {\n            suivJ_tombola: value,\n        })\n            .then((res) => {\n                console.log(res)\n            })\n    }\n\n    //update dotation\n    const updateDotation = (data, value) => {\n        Axios.post(`/server/JeuxFestival/update-dotation/${data.suivJ_id}`, {\n            suivJ_dotation: value,\n        })\n            .then((res) => {\n                console.log(res)\n            })\n    }\n\n    //update nombre de jeux reçus\n    const updateNbJeuxRecus = (data, value) => {\n        Axios.post(`/server/JeuxFestival/update-nbJeuxRecus/${data.suivJ_id}`, {\n            suivJ_nbJeuxRecus: value,\n        })\n            .then((res) => {\n                console.log(res)\n            })\n    }\n\n    //update nombre de jeux exposés\n    const updateNbJeuxExposes = (data, value) => {\n        Axios.post(`/server/JeuxFestival/update-nbJeuxExposes/${data.suivJ_id}`, {\n            suivJ_nbJeuxExposes: value,\n        })\n            .then((res) => {\n                console.log(res)\n            })\n    }\n    //update ageMin\n    const updateageMin = (data, value) => {\n\n        Axios.post(`/server/Jeux/${data.j_id}/update-ageMin`, {\n            ageMin: value,\n        })\n    }\n    // update joueurs Min\n    const updatenbjMin = (data, value) => {\n\n        Axios.post(`/server/Jeux/${data.j_id}/update-nbjMin`, {\n            nbjMin: value,\n        })\n    }\n    // update joueurs Max\n    const updatenbjMax = (data, value) => {\n\n        Axios.post(`/server/Jeux/${data.j_id}/update-nbjMax`, {\n            nbjMax: value,\n        })\n    }\n\n    // update DUREE\n    const updateDuree = (data, value) => {\n\n        Axios.post(`/server/Jeux/${data.j_id}/update-duree`, {\n            duree: value,\n        })\n    }\n\n    //  update NOTICE\n    const updateNotice = (data, value) => {\n\n        Axios.post(`/server/Jeux/${data.j_id}/update-lienNotice`, {\n            lienNotice: value,\n        })\n    }\n\n    //update recu\n    const updateRecu = (data, value) => {\n\n        Axios.post(`/server/JeuxFestival/update-recu/${data.suivJ_id}`, {\n            suivJ_recu: value,\n        })\n    }\n\n    //update a renvoyer\n    const updateARenvoyer = (data, value) => {\n\n        Axios.post(`/server/JeuxFestival/update-aRenvoyer/${data.suivJ_id}`, {\n            suivJ_aRenvoyer: value,\n        })\n            .then((res) => {\n                console.log(res)\n            })\n    }\n\n    //update renvoyé\n    const updateRenvoye = (data, value) => {\n\n        Axios.post(`/server/JeuxFestival/update-renvoye/${data.suivJ_id}`, {\n            suivJ_renvoye: value,\n        })\n            .then((res) => {\n                console.log(res)\n            })\n    }\n\n//déclarer toutes les colonnes\n    const columns = useMemo(() => {\n\n        const result = [\n            {\n                //This column is used for displaying more/less details\n                Header: () => null,\n                id: 'expander', // 'id' is required\n\n                Cell: ({row}) => (\n                    <span {...row.getToggleRowExpandedProps()}>\n                            {row.isExpanded ? <FontAwesomeIcon className=\"faiconDetail\" icon={faEyeSlash}/> :\n                                <FontAwesomeIcon className=\"faiconDetail\" icon={faInfoCircle}/>}\n                        </span>\n                ),\n            },\n            {\n                Header: \"Nom\",\n                accessor: \"jeu.j_titre\",\n            },\n            {\n                Header: \"Éditeur\",\n                accessor: \"jeu.societe.soc_nom\",\n\n\n                Cell: row => {\n\n                    return (\n                        isLogin() ?\n                            <div>\n                                <Form.Group>\n                                    <Form.Control style={{width: 'auto'}} as=\"select\"\n                                                  onChange={(e) => updateEditeurId(row.row.original, e.target.value)}>\n                                        {editeursList.map((object, i) =>\n                                            <option selected={row.value === object.soc_nom} value={object.soc_id}\n                                                    key={object.soc_id}> {object.soc_nom}</option>\n                                        )}\n                                    </Form.Control>\n                                </Form.Group>\n                            </div>\n                            : <p>{row.value}</p>\n                    )\n                }\n            },\n\n            {\n                Header: \"Type\",\n                accessor: \"jeu.type_jeu.typJ_libelle\",\n\n                disableSortBy: true,\n                Filter: SelectColumnFilter,\n                filter: 'equals',\n\n                Cell: row => {\n                    return (\n                        isLogin() ?\n                            <div>\n                                <Form.Group>\n                                    <Form.Control style={{width: 'auto'}} as=\"select\"\n                                                  onChange={(e) => updateGameTypeId(row.row.original, e.target.value)}>\n                                        {gameTypeList.map((object, i) =>\n                                            <option selected={row.value === object.typJ_libelle}\n                                                    value={object.typJ_id}\n                                                    key={object.typJ_id}> {object.typJ_libelle}</option>\n                                        )}\n                                    </Form.Control>\n                                </Form.Group>\n                            </div>\n                            : <p>{row.value}</p>\n                    )\n                }\n            },\n\n            {\n                Header: \"Zone\",\n                accessor: \"zone.zo_libelle\",\n\n                disableSortBy: true,\n                Filter: SelectColumnFilter,\n                filter: 'equals',\n\n\n                Cell: row => {\n\n                    return (\n                        isLogin() ?\n                            <div>\n                                <Form.Group>\n                                    <Form.Control style={{width: 'auto'}} as=\"select\"\n                                                  onChange={(e) => updateZone(row.row.original, e.target.value)}>\n                                        {zoneList.map((object, i) =>\n                                            <option selected={row.value === object.zo_libelle} value={object.zo_id}\n                                                    key={object.zo_id}> {object.zo_libelle}</option>\n                                        )}\n                                    </Form.Control>\n                                </Form.Group>\n                            </div>\n                            :  <p>{row.value}</p>\n                    )\n                }\n\n            },\n\n\n        ];\n\n        if(isLogin()) {\n            result.push(\n                {\n\n                    Header: \"Exposant\",\n                    accessor: \"reservation.societe.soc_nom\",\n\n                    Cell: row => {\n\n                        return (\n\n                            <a href=\"#\" onClick={() => goToExhibitorMonitoring(row.row.original.reservation.societe.soc_id)}>{row.value}</a>\n\n                        )\n                    }\n                },\n                {\n\n                    Header: \"Prototype\",\n                    accessor: d => d.suivJ_prototype != null ? d.suivJ_prototype.toString() : null, //required cast from boolea to string\n\n\n                    disableSortBy: true,\n                    Filter: SelectColumnFilter,\n                    filter: 'equals',\n\n                    Cell: row => {\n                        return (\n                            <div style={{'textAlign': 'center'}}>\n                                <input\n                                    type=\"checkbox\"\n                                    defaultChecked={row.value === \"true\"}\n                                    onChange={(event) => updatePrototype(row.row.original, event.target.checked)}/>\n                            </div>\n                        )\n                    },\n                },\n                {\n                    Header: \"Placé plan\",\n                    accessor: d => d.suivJ_place != null ? d.suivJ_place.toString() : null, //required cast from boolea to string\n\n\n                    disableSortBy: true,\n                    Filter: SelectColumnFilter,\n                    filter: 'equals',\n\n                    Cell: row => {\n                        return (\n                            <div style={{'textAlign': 'center'}}>\n                                <input\n                                    type=\"checkbox\"\n                                    defaultChecked={row.value === \"true\"}\n                                    onChange={(event) => updatePlace(row.row.original, event.target.checked)}/>\n                            </div>\n                        )\n                    },\n                },\n\n\n                {\n                    Header: \"Envoie ?\",\n                    accessor: d => d.reservation.res_envoiDebut != null ? d.reservation.res_envoiDebut.toString() : null, //required cast from boolea to string\n\n                    disableSortBy: true,\n                    Filter: SelectColumnFilter,\n                    filter: 'equals',\n                },\n                {\n                    Header: \"Reçu ?\",\n                    accessor: d => d.suivJ_recu != null ? d.suivJ_recu.toString() : null, //required cast from boolea to string\n\n                    disableSortBy: true,\n                    Filter: SelectColumnFilter,\n                    filter: 'equals',\n\n                    Cell: row => {\n                        return (\n                            <div style={{'textAlign': 'center'}}>\n                                <input\n                                    type=\"checkbox\"\n                                    defaultChecked={row.value === \"true\"}\n                                    onChange={(event) => updateRecu(row.row.original, event.target.checked)}/>\n                            </div>\n                        )\n                    },\n                },\n                {\n                    Header: \"A renvoyer ?\",\n                    accessor: d => d.suivJ_aRenvoyer != null ? d.suivJ_aRenvoyer.toString() : null, //required cast from boolea to string\n\n                    disableSortBy: true,\n                    Filter: SelectColumnFilter,\n                    filter: 'equals',\n\n                    Cell: row => {\n                        return (\n                            <div style={{'textAlign': 'center'}}>\n                                <input\n                                    type=\"checkbox\"\n                                    defaultChecked={row.value === \"true\"}\n                                    onChange={(event) => updateARenvoyer(row.row.original, event.target.checked)}/>\n                            </div>\n                        )\n                    },\n                },\n                {\n                    Header: \"Renvoyé ?\",\n                    accessor: d => d.suivJ_renvoye != null ? d.suivJ_renvoye.toString() : null, //required cast from boolea to string\n\n                    disableSortBy: true,\n                    Filter: SelectColumnFilter,\n                    filter: 'equals',\n\n                    Cell: row => {\n                        return (\n                            <div style={{'textAlign': 'center'}}>\n                                <input\n                                    type=\"checkbox\"\n                                    defaultChecked={row.value === \"true\"}\n                                    onChange={(event) => updateRenvoye(row.row.original, event.target.checked)}/>\n                            </div>\n                        )\n                    },\n                },\n                {\n                    Header: \"Dernière modifications\",\n                    accessor: \"suivJ_dateSaisie\",\n\n                    Cell: row => {\n                        return (\n                            <div>\n                                {Moment(row.row.original.suivJ_dateSaisie).format('DD/MM/YYYY')}\n                            </div>\n                        )\n                    },\n                }\n\n\n            )\n        }\n        return result\n\n    }, [listeJeux, editeursList, zoneList])\n\n    /**\n     * This method is used to display more details for a given object\n     * It is actived when clicking on the first column for a specific row\n     *\n     * @param row\n     * @returns {JSX.Element}\n     */\n    const detailsGame = (row) => {\n        //Display the cards (more details)\n        return (\n            <Card className=\"CardGames\">\n                {isLogin() ?\n                <div className=\"flex-item\">\n                    <CardTitle>\n                        <h5>Détails réservation </h5>\n                    </CardTitle>\n                    <CardText>\n                        <p>\n                            <label id=\"checboxCardGames\">Tombola:</label>\n                            <input\n                                type=\"checkbox\"\n                                defaultChecked={row.original.suivJ_tombola}\n                                onChange={(event) => updateTombola(row.original, event.target.checked)}/>\n                        </p>\n                        <p>\n                            <label id=\"checboxCardGames\">Dotation:</label>\n                            <input\n                                type=\"checkbox\"\n                                defaultChecked={row.original.suivJ_dotation}\n                                onChange={(event) => updateDotation(row.original, event.target.checked)}/>\n\n                        </p>\n                        <p>\n                            <label id=\"checboxCardGames\">Nombre de jeux reçus:</label>\n                            <input\n                                type=\"number\"\n                                min=\"0\"\n                                defaultValue={row.original.suivJ_nbJeuxRecus}\n                                onChange={(event) => updateNbJeuxRecus(row.original, event.target.value)}/>\n\n                        </p>\n                        <p>\n                            <label id=\"checboxCardGames\">Nombre de jeux exposés:</label>\n                            <input\n                                type=\"number\"\n                                min=\"0\"\n                                defaultValue={row.original.suivJ_nbJeuxExposes}\n                                onChange={(event) => updateageMin(row.original, event.target.value)}/>\n\n                        </p>\n                    </CardText>\n                </div>\n                      : null}\n                <div className=\"flex-item\">\n                    <CardTitle>\n                        <h5> Détails jeu </h5>\n                    </CardTitle>\n                    <CardText>\n                        <p>\n                            <label id=\"checboxCardGames\">Age minimum:</label>\n                            {isLogin() ?\n                            <input\n                                type=\"number\"\n                                min=\"0\"\n                                defaultValue={row.original.jeu.j_ageMin}\n                                onChange={(event) => updateNbJeuxExposes(row.original, event.target.value)}/>\n                                : row.original.jeu.j_ageMin}\n                                an(s)\n                        </p>\n                        <p>\n                            <label id=\"checboxCardGames\">Nombre de joueurs minimum: </label>\n                            {isLogin() ?\n                            <input\n                                type=\"number\"\n                                min=\"0\"\n                                defaultValue={row.original.jeu.j_nbMinJoueurs}\n                                onChange={(event) => updatenbjMin(row.original, event.target.value)}/>\n                                : row.original.jeu.j_nbMinJoueurs }\n                        </p>\n                        <p>\n                            <label id=\"checboxCardGames\"> Nombre de joueurs maximum: </label>\n                            {isLogin() ?\n                            <input\n                                type=\"number\"\n                                min={row.original.jeu.j_nbMinJoueurs}\n                                defaultValue={row.original.jeu.j_nbMaxJoueurs}\n                                onChange={(event) => updatenbjMax(row.original, event.target.value)}/>\n                                : row.original.jeu.j_nbMaxJoueurs}\n                        </p>\n                        <p>\n                            <label id=\"checboxCardGames\">Durée: </label>\n                            {isLogin() ?\n                            <input\n                                type=\"time\"\n                                defaultValue={row.original.jeu.j_duree}\n                                onChange={(event) => updateDuree(row.original, event.target.value)}/>\n                                : row.original.jeu.j_duree}\n                        </p>\n                        <p>\n                            {row.original.jeu.j_lienNotice !== \"'NULL'\" ? (\n                                <CardLink href={row.original.jeu.j_lienNotice}>Voir les règles du jeu</CardLink>\n                            ) : null}\n\n                        </p>\n                        {\n                            isLogin() ? <p><label id=\"checboxCardGames\"> Changer le lien des règles: </label>\n                            <input\n                            type=\"url\"\n                            defaultValue={row.original.jeu.j_lienNotice}\n                            onChange={(event) => updateNotice(row.original, event.target.value)}/>\n                            </p>\n                                : null\n                        }\n\n\n                    </CardText>\n                </div>\n            </Card>\n        )\n\n\n    }\n\n    return (\n        <div className=\"EspaceFooter\">\n            <div id=\"titlePageJeuxFestival\">\n                <h1>\n                    <FontAwesomeIcon className=\"faicon\" icon={faDice}/>\n                    Suivi des jeux du festival\n                </h1>\n            </div>\n            <div style={{marginTop: `50px`}}>\n                <TableContainer columns={columns} data={listeJeux} renderRowSubComponent={detailsGame}/>\n            </div>\n        </div>\n    )\n}\n\nexport default FestivalGames","import React, {useEffect, useMemo, useState} from \"react\";\nimport Axios from \"axios\";\nimport {useLocation, useParams} from \"react-router-dom\";\nimport Accordion from 'react-bootstrap/Accordion'\nimport Card from 'react-bootstrap/Card'\nimport './exhibitor-monitoring.css'\nimport {faCheckCircle} from \"@fortawesome/free-solid-svg-icons\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport Alert from \"react-bootstrap/Alert\";\nimport CardContact from \"../../components/contact/CardContact\";\n\nconst ExhibitorMonitoring = () => {\n\n    const {idExposant} = useParams();\n\n    console.log(idExposant);\n    const [contactList, setContactList] = useState([]);\n    const [name, setName] = useState(\"\");\n    const [show, setShow] = useState(false);\n    const [showAdress, setShowAdress] = useState(false);\n    const [soc_ville, setSoc_ville] = useState(\"\");\n    const [soc_rue, setSoc_rue] = useState(\"\");\n    const [soc_codePostal, setSoc_codePostal] = useState(\"\");\n    const [soc_pays, setSoc_pays] = useState(\"\");\n    const [detailSuivi, setDetailSuivi] = useState([]);\n    const [commentaire, setCommentaire] = useState(\"\");\n\n    //méthode qui s'appelle au chargement de la page\n    useEffect(() => {\n        //Récupérer les infos des contacts\n        Axios.get(`/server/societe/${idExposant}/contacts`)\n            .then((res) => {\n                setContactList(res.data)\n                setName(res.data.soc_nom)\n                setSoc_rue(res.data.soc_rue)\n                setSoc_ville(res.data.soc_ville)\n                setSoc_codePostal(res.data.soc_codePostal)\n                setSoc_pays(res.data.soc_pays)\n\n\n            });\n\n    }, []);\n\n    useEffect(() => {\n        //Récupérerles infos de suivi et de la réservation\n        const fes_id = localStorage.getItem(\"currentFestival\")\n\n        Axios.get(`/server/reservations/${idExposant}/${fes_id}/allInformations`).then((res) => {\n            setDetailSuivi(res.data[0])\n            setCommentaire(res.data[0].suivE_commentaire)\n            console.log(\"SUIVI\", res)\n        })\n    }, []);\n\n    function validateForm() {\n        return name.length > 0;\n    }\n\n    function validateFormAdress() {\n        return soc_ville.length > 0 && soc_rue.length > 0 && soc_codePostal.length > 0 && soc_pays.length > 0\n    }\n\n    //changer le nom\n    const updateNom = (event) => {\n        event.preventDefault()\n\n        Axios.post(`/server/societe/${idExposant}/update-name`, {\n            name: name,\n        }).then((res) => {\n            setShow(\"true\");\n        })\n    }\n\n    //update commentaire\n    const updateCommentaire = (event) => {\n        event.preventDefault()\n\n        Axios.post(`/server/suiviExposant/${idExposant}/update-commentaire`,{\n            fes_id: localStorage.getItem(\"currentFestival\"),\n            suivE_commentaire: commentaire,\n        }).then((res) => {\n            console.log(res)\n        })\n    }\n\n    //changer adresse exposant\n    const updateAdress = (event) => {\n        event.preventDefault()\n\n        Axios.post(`/server/societe/${idExposant}/update-adress`, {\n            soc_ville: soc_ville,\n            soc_rue: soc_rue,\n            soc_codePostal: soc_codePostal,\n            soc_pays: soc_pays\n        }).then((res) => {\n            setShowAdress(\"true\");\n        })\n    }\n\n    return (\n        <div className=\"EspaceFooter\">\n            <div id=\"titlePageJeuxFestival\">\n                <h1>\n                    {name}\n                </h1>\n            </div>\n            <div className=\"flex-container-Contacts\">\n\n                <div className=\"flex-item\">\n                    <Form onSubmit={updateNom} id=\"nomExposant\">\n\n                        <label id=\"labelNomExposant\">Changer le nom: </label>\n                        <input value={name} onChange={(e) => {\n                            setName(e.target.value);\n                            setShow(false)\n                        }}/>\n                        <Button type=\"submit\" id=\"btnCheck\" disabled={!validateForm()}>\n                            <FontAwesomeIcon className=\"faicon\" id=\"validateButton\" icon={faCheckCircle}/>\n                        </Button>\n\n                        <Alert id=\"alertSucces\" variant=\"success\" show={show}>\n                            Nom modifié !\n                        </Alert>\n                    </Form>\n                    <Alert id=\"alertSucces\" variant=\"success\" show={showAdress}>\n                        Adresse modifiée !\n                    </Alert>\n\n                </div>\n\n\n                <div className=\"flex-item\">\n                    <Form onSubmit={updateCommentaire} >\n\n                    <textarea id=\"commentaireStickyNote\" value=  {commentaire} onChange={ (e) => {\n                        setCommentaire(e.target.value)\n                    }}/>\n\n                    <Button type=\"submit\" id=\"btnCheck\">\n                        Mettre à jour la note\n                        <FontAwesomeIcon className=\"faicon\" id=\"validateButton\" icon={faCheckCircle}/>\n                    </Button>\n                    </Form>\n\n                </div>\n            </div>\n\n\n            <Accordion>\n                <Card>\n                    <Accordion.Toggle as={Card.Header} eventKey=\"0\">\n                        Contacts\n                    </Accordion.Toggle>\n                    <Accordion.Collapse eventKey=\"0\">\n\n                        <Card.Body className=\"flex-container-Contacts\">\n                            <Card className=\"flex-item\">\n\n                                <Card.Header>Adresse: {name}</Card.Header>\n                                <div id=\"cardContacts\">\n                                    <Form onSubmit={updateAdress}>\n                                        <div>\n                                            <textarea id=\"expoAdress\"  value={soc_rue} onChange={(e) => {\n                                                setSoc_rue(e.target.value);\n                                                setShowAdress(false)\n                                            }}/>\n\n                                        </div>\n                                        <div>\n                                            <textarea id=\"expoAdress\" value={soc_codePostal}\n                                                   onChange={(e) => setSoc_codePostal(e.target.value)}/>\n\n                                        </div>\n\n                                        <div>\n                                            <textarea id=\"expoAdress\" value={soc_ville}\n                                                   onChange={(e) => setSoc_ville(e.target.value)}/>\n\n                                        </div>\n                                        <div>\n                                            <textarea id=\"expoAdress\" value={soc_pays}\n                                                   onChange={(e) => setSoc_pays(e.target.value)}/>\n\n                                        </div>\n\n                                        <Button type=\"submit\" id=\"btnCheck\" disabled={!validateFormAdress()}>\n                                            <FontAwesomeIcon className=\"faicon\" id=\"validateButton\"\n                                                             icon={faCheckCircle}/>\n                                        </Button>\n                                    </Form>\n                                </div>\n                            </Card>\n\n\n                        </Card.Body>\n                    </Accordion.Collapse>\n                </Card>\n\n                <Card>\n                    <Accordion.Toggle as={Card.Header} eventKey=\"1\">\n                        Détails suivi\n                    </Accordion.Toggle>\n                    <Accordion.Collapse eventKey=\"1\">\n                        <Card.Body>\n                            1er contact: {detailSuivi.suivE_dateContact1}\n                            2eme contact: {detailSuivi.suivE_dateContact2}\n                            3eme contact: {detailSuivi.suivE_dateContact3}\n                            se déplace: {detailSuivi.suivE_deplacement}\n                            besoin de bénévoles: {detailSuivi.suivE_benevole}\n                            combien de bénévoles: {detailSuivi.suivE_nbBenevoles}\n                            il envoie ses jeux: {detailSuivi.res_envoiDebut}\n                            facturé ? {detailSuivi.res_facture}\n                            payé? {detailSuivi.res_paiemen}\n\n                        </Card.Body>\n                    </Accordion.Collapse>\n                </Card>\n\n                <Card>\n                    <Accordion.Toggle as={Card.Header} eventKey=\"2\">\n                        Réservation\n                    </Accordion.Toggle>\n                    <Accordion.Collapse eventKey=\"2\">\n                        <Card.Body>Hello! I'm another body</Card.Body>\n                    </Accordion.Collapse>\n                </Card>\n\n                <Card>\n                    <Accordion.Toggle as={Card.Header} eventKey=\"3\">\n                        Jeux de la réservation\n                    </Accordion.Toggle>\n                    <Accordion.Collapse eventKey=\"3\">\n                        <Card.Body>Hello! I'm another body</Card.Body>\n                    </Accordion.Collapse>\n                </Card>\n            </Accordion>\n        </div>\n    )\n}\nexport default ExhibitorMonitoring","import React, {useEffect, useState, useMemo} from \"react\";\nimport Axios from \"axios\"\nimport TableContainer from \"../../components/tables/TableContainer\";\nimport {SelectColumnFilter} from \"../../components/tables/Filters\";\n\nimport './AfficherSociete.css'\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faEyeSlash, faInfoCircle} from \"@fortawesome/free-solid-svg-icons\";\nimport {Container} from \"../../components/ModalForm/container\";\nimport FormSociete from \"./formSociete\";\n\n\nexport default function AfficherSocieteRole() {\n\n    const [societe, setListSociete] = useState([])\n\n    /**\n     * This method is used to fetch data from DB every time it is been updated\n     */\n    useEffect(() => {\n        const fetchData = async () => {\n            const response = await Axios.get(`/server/festivals/affichageRole/${localStorage.getItem(\"currentFestival\")}`);\n            setListSociete(response.data[0].societes)\n        };\n        fetchData();\n    }, [])\n\n\n    /**\n     * This method is used to update the status (soc_estInactif) of a societe\n     *\n     * @param rowIndex\n     * @param columnId\n     * @param value\n     */\n    const updateStatusInactif = (data, value) => {\n        console.log(\"RESULT\", data, value)\n        Axios.put(\"/serversociete/updateStatusInactif\", {\n            soc_id: data.soc_id, //row id=0 <==> soc_id = 1 --> d'où le +1\n            soc_estInactif: value //'true' or 'false'\n        })\n    }\n\n    const updateStatusEditeur = (data, value) => {\n        console.log(\"RESULT\", data, value)\n\n        Axios.put(\"/serversociete/updateStatusEditeur\", {\n            soc_id: data.soc_id, //row id=0 <==> soc_id = 1 --> d'où le +1\n            fes_id: localStorage.getItem(\"currentFestival\"),\n            rolF_estEditeur: value //'true' or 'false'\n        })\n    }\n\n    const updateStatusExposant = (data, value) => {\n        console.log(\"RESULT\", data, value)\n\n        Axios.put(\"/serversociete/updateStatusExposant\", {\n            soc_id: data.soc_id, //row id=0 <==> soc_id = 1 --> d'où le +1\n            fes_id: localStorage.getItem(\"currentFestival\"),\n            rolF_estExposant: value //'true' or 'false'\n        })\n    }\n\n    /**\n     * This method is declaring all the columns for the table\n     *\n     * @type {[{Header: (function(): null), id: string, Cell: (function({row: *}))}, {Header: string, accessor: string}, {filter: string, Header: string, Filter: (function({column: {filterValue: *, setFilter: *, preFilteredRows: *, id?: *}}): *), accessor: (function(*): string), id: string, disableSortBy: boolean, Cell: (function(*))}]}\n     */\n    const columns = useMemo(() => [\n            {\n                //This column is used for displaying more/less details\n                Header: () => null,\n                id: 'expander', // 'id' is required\n\n                Cell: ({row}) => (\n                    <span {...row.getToggleRowExpandedProps()}>\n                        {row.isExpanded ? <FontAwesomeIcon className=\"faiconDetail\" icon={faEyeSlash}/> :\n                            <FontAwesomeIcon className=\"faiconDetail\" icon={faInfoCircle}/>}\n                    </span>\n                ),\n            },\n            {\n                Header: \"Nom\",\n                accessor: \"soc_nom\",\n            },\n            {\n                id: \"inactif\",\n                Header: \"Inactif\",\n                accessor: d => d.soc_estInactif, //required cast from boolea to string\n\n                //Allows column to be sorted depending on all content type (true/false)\n                disableSortBy: true,\n                Filter: SelectColumnFilter,\n                filter: 'equals',\n\n                //Displays checkox for each row\n                //Calls updateStatusInactif every time a checkbox is been updated\n                Cell: row => {\n                    return (\n                        <div style={{'textAlign': 'center'}}>\n\n                            <input\n                                type=\"checkbox\"\n                                defaultChecked={row.value}\n                                onChange={(event) => updateStatusInactif(row.row.original, event.target.checked ? 1 : 0)}/>\n                        </div>\n                    )\n                },\n            },\n            {\n                id: \"estExposant\",\n                Header: \"Exposant\",\n                accessor: d => d.role_festival.rolF_estExposant, //required cast from boolean to string\n\n                //Allows column to be sorted depending on all content type (true/false)\n                disableSortBy: true,\n                Filter: SelectColumnFilter,\n                filter: 'equals',\n\n                Cell: row => {\n                    return (\n\n                        <div style={{'textAlign': 'center'}}>\n                            {\n                                console.log(\"ROW VALUE\", row)\n                            }\n                            <input\n                                type=\"checkbox\"\n                                defaultChecked={row.value == 1 ? true : false}\n                                onChange={(event) => updateStatusExposant(row.row.original, event.target.checked)}\n                            />\n                        </div>\n                    )\n                },\n            },\n            {\n                id: \"estEditeur\",\n                Header: \"Editeur\",\n                accessor: d => d.role_festival.rolF_estEditeur, //required cast from boolean to string\n\n\n                //Allows column to be sorted depending on all content type (true/false)\n                disableSortBy: true,\n                Filter: SelectColumnFilter,\n                filter: 'equals',\n\n                Cell: row => {\n                    return (\n                        <div style={{'textAlign': 'center'}}>\n                            <input\n                                type=\"checkbox\"\n                                defaultChecked={row.value == 1 ? true : false}\n                                onChange={(event) => updateStatusEditeur(row.row.original, event.target.checked ? true : false)}\n                            />\n                        </div>\n                    )\n                },\n            },\n        ], []\n    )\n\n    /**\n     * This method is used to display more details for a given object\n     * It is actived when clicking on the first column for a specific row\n     *\n     * @param row\n     * @returns {JSX.Element}\n     */\n    const detailsSociete = (row) => {\n\n    };\n\n\n    /**\n     * Display the table\n     *\n     * required :\n     *      the columns set up above\n     *      the data (list of societes)\n     * optional :\n     *      {renderRowSubComponent} only if you want the ability to display more details\n     */\n    return (\n        <div style={{marginTop: `50px`}} className=\"EspaceFooter\">\n            {/*\n           <TableContainer columns={columns} data={societe} renderRowSubComponent={detailsSociete}/>\n\n            <Container triggerText=\"Créer une societe\" onSubmit={(e) => onSubmit(e)} component={FormSociete}/>\n*/}\n\n        </div>\n    )\n}\n\n","import React from \"react\";\nimport {BrowserRouter as Router, Switch, Route, Link} from \"react-router-dom\";\n\n\n//les pages accessibles depuis la navbar\nimport Home from \"../pages/home/home\";\nimport Login from \"../pages/login/login\";\nimport UpdatePassword from \"../pages/update-password/update-password\";\nimport AfficherExposant from \"../pages/societe/AfficherExposant\";\nimport HandleAccounts from \"../pages/handle-accounts/handle-accounts\";\nimport Festivals from \"../pages/festivals/Festivals\";\nimport TypeJeux from \"../pages/type-jeux/type-jeux\"\nimport {Jeux} from \"../pages/jeux/jeux\";\nimport PrivateRoute from \"./privateRoute\";\nimport FestivalGames from \"../pages/festival-games/festival-games\";\nimport ExhibitorMonitoring from \"../pages/exhibitor-monitoring/exhibitor-monitoring\";\nimport AfficherSocieteRole from \"../pages/societe/AfficherSocieteRole\";\nimport FormLocalisation from \"../components/festivals/FormLocalisation\";\n\n// DANS LE SWITCH\n//exact permet de dire que c'est la page par defaut\n//Private route = route accéccibles que quand login\nfunction Routes() {\n    return (\n        <div className=\"App\">\n\n            <Switch>\n                <Route exact path='/' component={Home}/>\n                <Route path='/login' component={Login}/>\n                <Route path='/festival-games' component={FestivalGames}/>\n                <PrivateRoute path='/update-password' component={UpdatePassword}/>\n                <PrivateRoute path='/exposants' component={AfficherExposant}/>\n                <PrivateRoute path='/societes' component={AfficherSocieteRole}/>\n                <PrivateRoute path='/handle-accounts' component={HandleAccounts}/>\n                <PrivateRoute path='/festivals' component={Festivals}/>\n                <PrivateRoute path='/localisation' component={FormLocalisation}/>\n                <PrivateRoute path='/jeux' component={Jeux}/>\n                <PrivateRoute path='/type-jeux' component={TypeJeux}/>\n                <PrivateRoute path='/exhibitor-monitoring/:idExposant' component={ExhibitorMonitoring}/>\n            </Switch>\n        </div>\n    )\n}\n\nexport default Routes\n","import {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faFacebook, faInstagram, faTwitter} from \"@fortawesome/free-brands-svg-icons\";\nimport {faEnvelope, faMapMarker, faPhone} from \"@fortawesome/free-solid-svg-icons\";\nimport logo from \"../../../assets/img/logo.png\";\nimport React from \"react\";\nimport './CustomFooter.css'\n\nfunction CustomFooter() {\n\n    return (\n        <div>\n            <footer className=\"footer\">\n                <div className=\"footer-left col-md-4 col-sm-6\">\n                    <p className=\"about\">\n                        <span> A propos</span> Depuis 2015, l’organisation du Festival du Jeu de Montpellier est\n                        soutenue par un collectif d’associations.\n\n                        Les bénévoles qui animent notre Festival sont bien souvent membres de ces associations. Et c’est\n                        bien normal, le reste de l’année, les joueurs jouent et se retrouvent lors d’événements\n                        organisés par leurs associations : soirées jeux, week-end jeux, festivals de jeux, etc.\n\n                    </p>\n                    <div className=\"icons\">\n                        <a href=\"https://www.facebook.com/festivaldujeudemontpellier/\"><FontAwesomeIcon\n                            icon={faFacebook}/></a>\n                        <a href=\"https://twitter.com/FestivalJeuMpl\"><FontAwesomeIcon icon={faTwitter}/></a>\n                        <a href=\"https://www.instagram.com/festivaldujeumontpellier/\"><FontAwesomeIcon\n                            icon={faInstagram}/></a>\n                    </div>\n                </div>\n                <div className=\"footer-center col-md-4 col-sm-6\">\n                    <div>\n                        <FontAwesomeIcon id=\"fa\" icon={faMapMarker}/>\n                        <p><span> Boulevard Charles Warnery</span> Montpellier, France</p>\n                    </div>\n                    <div>\n                        <FontAwesomeIcon id=\"fa\" icon={faPhone}/>\n                        <p> (+00) 0000 000 000</p>\n                    </div>\n                    <div>\n                        <FontAwesomeIcon id=\"fa\" icon={faEnvelope}/>\n                        <p>contact@festivaldujeu-montpellier.org</p>\n                    </div>\n                </div>\n                <div className=\"footer-right col-md-4 col-sm-6\">\n                    <img id=\"logoFestival\" src={logo}/>\n                    <p className=\"menu\">\n                        <a href=\"#\"> Home</a> |\n                        <a href=\"#\"> About</a> |\n                        <a href=\"#\"> Services</a> |\n                        <a href=\"#\"> Portfolio</a> |\n                        <a href=\"#\"> News</a> |\n                        <a href=\"#\"> Contact</a>\n                    </p>\n                    <p className=\"name\"> Festival du jeu de Montpellier &copy; 2021</p>\n                    <p className=\"name\"> Marine Téroitin - Laura Biasibetti - Aymeric Couprie</p>\n                </div>\n            </footer>\n        </div>\n    )\n}\n\n\nexport default CustomFooter\n","import './App.css'\nimport React from \"react\";\n\n//pour avoir la navbar sur toutes les pages on l'a mise dans un component\nimport CustomHeader from \"./app/components/headerfooter/CustomHeader\";\nimport Routes from \"./app/routes/routes\"\nimport CustomFooter from \"./app/components/headerfooter/CustomFooter\"\n\nfunction App() {\n\n    return (\n        <div className=\"App\">\n                <CustomHeader/>\n                <Routes/>\n                <CustomFooter/>\n        </div>\n    );\n\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport { BrowserRouter as Router} from 'react-router-dom';\nimport \"./index.css\"\n\nReactDOM.render(\n  <React.StrictMode>\n      <Router>\n          <App/>\n      </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}